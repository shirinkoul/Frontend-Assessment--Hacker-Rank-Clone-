{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CSSNativeParseRun = void 0;\nvar _CSSParseRun = require(\"./CSSParseRun\");\nvar _helpers = require(\"./helpers\");\nvar _ShortMergeRequest = require(\"./ShortMergeRequest\");\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nconst nativeDirectionalStyleKeys = {\n  borderBottomEndRadius: 'block',\n  borderBottomStartRadius: 'block',\n  borderEndColor: 'block',\n  borderEndWidth: 'block',\n  borderStartColor: 'block',\n  borderStartWidth: 'block',\n  borderTopEndRadius: 'block',\n  borderTopStartRadius: 'block',\n  end: 'block',\n  marginEnd: 'block',\n  marginStart: 'block',\n  paddingEnd: 'block',\n  paddingStart: 'block',\n  start: 'block'\n};\nconst extraLongViewStyles = {\n  elevation: 'block',\n  overflow: 'block',\n  overlayColor: 'block',\n  resizeMode: 'block',\n  rotation: 'block',\n  scaleX: 'block',\n  scaleY: 'block',\n  shadowColor: 'block',\n  shadowOffset: 'block',\n  shadowOpacity: 'block',\n  shadowRadius: 'block',\n  testID: 'block',\n  tintColor: 'block',\n  transformMatrix: 'block',\n  translateX: 'block',\n  translateY: 'block'\n};\nconst extraTextStyles = {\n  includeFontPadding: 'text',\n  textAlignVertical: 'text',\n  textShadowColor: 'text',\n  textShadowOffset: 'text',\n  textShadowRadius: 'text',\n  writingDirection: 'text'\n};\nconst extraStylesRegistry = {\n  ...extraTextStyles,\n  ...extraLongViewStyles\n};\nclass CSSNativeParseRun extends _CSSParseRun.CSSParseRun {\n  constructor(declaration, registry) {\n    super(registry);\n    _defineProperty(this, \"declaration\", void 0);\n    this.declaration = declaration;\n  }\n  fillProp(key, value) {\n    const validator = this.validationMap.getValidatorForProperty(key);\n    if (validator) {\n      const normalizedValue = validator.normalizeNativeValue(value);\n      if (normalizedValue instanceof _ShortMergeRequest.ShortMergeRequest) {\n        normalizedValue.forEach(_ref => {\n          let [innerKey, innerValue] = _ref;\n          this.fillProp(innerKey, innerValue);\n        });\n      } else {\n        // assume longhand merge\n        this.processedProps.withProperty(key, normalizedValue, validator);\n      }\n    } else if ((0, _helpers.lookupRecord)(extraStylesRegistry, key)) {\n      this.processedProps.withProperty(key, value, {\n        compatCategory: 'native',\n        displayCategory: extraStylesRegistry[key],\n        propagationCategory: 'retain'\n      });\n    } else if ((0, _helpers.lookupRecord)(nativeDirectionalStyleKeys, key)) {\n      console.warn(`Native style property \"${key}\" is a directional style property. These are not yet supported.`);\n    } else {\n      console.warn(`Native style property \"${key}\" is not supported and has been ignored.`);\n    }\n  }\n  fillProcessedProps() {\n    const declaration = this.declaration;\n    for (const key of Object.keys(declaration)) {\n      this.fillProp(key, this.declaration[key]);\n    }\n  }\n}\nexports.CSSNativeParseRun = CSSNativeParseRun;","map":{"version":3,"mappings":"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","names":["nativeDirectionalStyleKeys","borderBottomEndRadius","borderBottomStartRadius","borderEndColor","borderEndWidth","borderStartColor","borderStartWidth","borderTopEndRadius","borderTopStartRadius","end","marginEnd","marginStart","paddingEnd","paddingStart","start","extraLongViewStyles","elevation","overflow","overlayColor","resizeMode","rotation","scaleX","scaleY","shadowColor","shadowOffset","shadowOpacity","shadowRadius","testID","tintColor","transformMatrix","translateX","translateY","extraTextStyles","includeFontPadding","textAlignVertical","textShadowColor","textShadowOffset","textShadowRadius","writingDirection","extraStylesRegistry","CSSNativeParseRun","CSSParseRun","constructor","declaration","registry","_defineProperty","fillProp","key","value","validator","validationMap","getValidatorForProperty","normalizedValue","normalizeNativeValue","ShortMergeRequest","forEach","innerKey","innerValue","processedProps","withProperty","compatCategory","displayCategory","propagationCategory","console","warn","fillProcessedProps","Object","keys"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/@native-html/css-processor/lib/commonjs/CSSNativeParseRun.ts"],"sourcesContent":["import { CSSParseRun } from './CSSParseRun';\nimport { MixedStyleDeclaration } from './CSSProcessor';\nimport { CSSPropertiesValidationRegistry } from './CSSPropertiesValidationRegistry';\nimport { lookupRecord } from './helpers';\nimport {\n  ExtraNativeTextStyle,\n  NativeDirectionalStyleKeys,\n  ExtraNativeLongViewStyleKeys\n} from './native-types';\nimport { CSSPropertySpecs } from './processor-types';\nimport { ShortMergeRequest } from './ShortMergeRequest';\n\nconst nativeDirectionalStyleKeys: Record<NativeDirectionalStyleKeys, 'block'> =\n  {\n    borderBottomEndRadius: 'block',\n    borderBottomStartRadius: 'block',\n    borderEndColor: 'block',\n    borderEndWidth: 'block',\n    borderStartColor: 'block',\n    borderStartWidth: 'block',\n    borderTopEndRadius: 'block',\n    borderTopStartRadius: 'block',\n    end: 'block',\n    marginEnd: 'block',\n    marginStart: 'block',\n    paddingEnd: 'block',\n    paddingStart: 'block',\n    start: 'block'\n  };\n\nconst extraLongViewStyles: Record<ExtraNativeLongViewStyleKeys, 'block'> = {\n  elevation: 'block',\n  overflow: 'block',\n  overlayColor: 'block',\n  resizeMode: 'block',\n  rotation: 'block',\n  scaleX: 'block',\n  scaleY: 'block',\n  shadowColor: 'block',\n  shadowOffset: 'block',\n  shadowOpacity: 'block',\n  shadowRadius: 'block',\n  testID: 'block',\n  tintColor: 'block',\n  transformMatrix: 'block',\n  translateX: 'block',\n  translateY: 'block'\n};\n\nconst extraTextStyles: Record<keyof ExtraNativeTextStyle, 'text'> = {\n  includeFontPadding: 'text',\n  textAlignVertical: 'text',\n  textShadowColor: 'text',\n  textShadowOffset: 'text',\n  textShadowRadius: 'text',\n  writingDirection: 'text'\n};\n\nconst extraStylesRegistry = {\n  ...extraTextStyles,\n  ...extraLongViewStyles\n};\n\nexport class CSSNativeParseRun extends CSSParseRun {\n  private declaration: MixedStyleDeclaration;\n\n  constructor(\n    declaration: MixedStyleDeclaration,\n    registry: CSSPropertiesValidationRegistry\n  ) {\n    super(registry);\n    this.declaration = declaration;\n  }\n\n  private fillProp<K extends keyof MixedStyleDeclaration>(\n    key: K,\n    value: any\n  ): void {\n    const validator = this.validationMap.getValidatorForProperty(key);\n    if (validator) {\n      const normalizedValue = validator.normalizeNativeValue(value);\n      if (normalizedValue instanceof ShortMergeRequest) {\n        normalizedValue.forEach(([innerKey, innerValue]) => {\n          this.fillProp(innerKey as any, innerValue);\n        });\n      } else {\n        // assume longhand merge\n        this.processedProps.withProperty(\n          key,\n          normalizedValue,\n          validator as CSSPropertySpecs\n        );\n      }\n    } else if (lookupRecord(extraStylesRegistry, key)) {\n      this.processedProps.withProperty(key, value, {\n        compatCategory: 'native',\n        displayCategory: extraStylesRegistry[key],\n        propagationCategory: 'retain'\n      });\n    } else if (lookupRecord(nativeDirectionalStyleKeys, key)) {\n      console.warn(\n        `Native style property \"${key}\" is a directional style property. These are not yet supported.`\n      );\n    } else {\n      console.warn(\n        `Native style property \"${key}\" is not supported and has been ignored.`\n      );\n    }\n  }\n\n  protected fillProcessedProps(): void {\n    const declaration = this.declaration;\n    for (const key of Object.keys(declaration) as Array<\n      keyof MixedStyleDeclaration\n    >) {\n      this.fillProp(key, this.declaration[key]);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}