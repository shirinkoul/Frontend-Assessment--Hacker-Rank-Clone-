{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useInternalRenderer;\nvar _IMGElement = _interopRequireDefault(require(\"../elements/IMGElement\"));\nvar _OLElement = _interopRequireDefault(require(\"../elements/OLElement\"));\nvar _ULElement = _interopRequireDefault(require(\"../elements/ULElement\"));\nvar _ARenderer = require(\"../renderers/ARenderer\");\nvar _IMGRenderer = require(\"../renderers/IMGRenderer\");\nvar _OLRenderer = require(\"../renderers/OLRenderer\");\nvar _ULRenderer = require(\"../renderers/ULRenderer\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst specialRenderersConfig = {\n  img: {\n    hook: _IMGRenderer.useIMGElementProps,\n    Element: _IMGElement.default\n  },\n  ol: {\n    hook: _OLRenderer.useOLElementProps,\n    Element: _OLElement.default\n  },\n  ul: {\n    hook: _ULRenderer.useULElementProps,\n    Element: _ULElement.default\n  },\n  a: {\n    hook: _ARenderer.useAElementProps,\n    Element: undefined\n  }\n};\nfunction hasSpecialInternalRenderer(tagName) {\n  return tagName in specialRenderersConfig;\n}\n\n/**\n * Resuse internal renderers logic for infinite customization!\n *\n * @remarks `tagName` must be invariant, i.e. it cannot change. You would\n * otherwise break the rules of hooks.\n *\n * @param tagName - **Invariant** The tag name to extend.\n * @param props - The props passed to the custom renderer.\n * @typeParam T - The name of the tag to target.\n * @returns An object with two fields: `Renderer` (the internal react\n * component) and `rendererProps`, the internal component props.\n *\n * @public\n */\nfunction useInternalRenderer(tagName, props) {\n  const {\n    TDefaultRenderer,\n    ...rendererProps\n  } = props;\n  if (hasSpecialInternalRenderer(tagName)) {\n    return {\n      Renderer: specialRenderersConfig[tagName].Element || TDefaultRenderer,\n      rendererProps: specialRenderersConfig[tagName].hook(props)\n    };\n  }\n  return {\n    Renderer: TDefaultRenderer,\n    rendererProps\n  };\n}","map":{"version":3,"mappings":";;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA,MAAMA,sBAAsB,GAAG;EAC7BC,GAAG,EAAE;IACHC,IAAI,EAAEC,+BADH;IAEHC,OAAO,EAAEC;EAFN,CADwB;EAK7BC,EAAE,EAAE;IACFJ,IAAI,EAAEK,6BADJ;IAEFH,OAAO,EAAEI;EAFP,CALyB;EAS7BC,EAAE,EAAE;IACFP,IAAI,EAAEQ,6BADJ;IAEFN,OAAO,EAAEO;EAFP,CATyB;EAa7BC,CAAC,EAAE;IACDV,IAAI,EAAEW,2BADL;IAEDT,OAAO,EAAEU;EAFR;AAb0B,CAA/B;AAqBA,SAASC,0BAAT,CACEC,OADF,EAEkD;EAChD,OAAOA,OAAO,IAAIhB,sBAAlB;AACD;;AAMD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASiB,mBAAT,CACbD,OADa,EAEbE,KAFa,EAKwC;EACrD,MAAM;IAAEC,gBAAF;IAAoB,GAAGC;EAAvB,IAAyCF,KAA/C;EACA,IAAIH,0BAA0B,CAACC,OAAD,CAA9B,EAAyC;IACvC,OAAO;MACLK,QAAQ,EAAErB,sBAAsB,CAACgB,OAAD,CAAtB,CAAgCZ,OAAhC,IAA2Ce,gBADhD;MAELC,aAAa,EAAEpB,sBAAsB,CAACgB,OAAD,CAAtB,CAAgCd,IAAhC,CAAqCgB,KAArC;IAFV,CAAP;EAID;EACD,OAAO;IACLG,QAAQ,EAAEF,gBADL;IAELC;EAFK,CAAP;AAID","names":["specialRenderersConfig","img","hook","useIMGElementProps","Element","IMGElement","ol","useOLElementProps","OLElement","ul","useULElementProps","ULElement","a","useAElementProps","undefined","hasSpecialInternalRenderer","tagName","useInternalRenderer","props","TDefaultRenderer","rendererProps","Renderer"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/react-native-render-html/lib/commonjs/hooks/useInternalRenderer.ts"],"sourcesContent":["import { TagName } from '@native-html/transient-render-engine';\nimport { ComponentType } from 'react';\nimport IMGElement from '../elements/IMGElement';\nimport OLElement from '../elements/OLElement';\nimport ULElement from '../elements/ULElement';\nimport { useAElementProps } from '../renderers/ARenderer';\nimport { useIMGElementProps } from '../renderers/IMGRenderer';\nimport { useOLElementProps } from '../renderers/OLRenderer';\nimport { useULElementProps } from '../renderers/ULRenderer';\nimport { InternalRendererProps, TDefaultRendererProps } from '../shared-types';\n\nconst specialRenderersConfig = {\n  img: {\n    hook: useIMGElementProps,\n    Element: IMGElement\n  },\n  ol: {\n    hook: useOLElementProps,\n    Element: OLElement\n  },\n  ul: {\n    hook: useULElementProps,\n    Element: ULElement\n  },\n  a: {\n    hook: useAElementProps,\n    Element: undefined\n  }\n};\n\nexport type InternalSpecialRenderedTag = keyof typeof specialRenderersConfig;\n\nfunction hasSpecialInternalRenderer(\n  tagName: TagName\n): tagName is keyof typeof specialRenderersConfig {\n  return tagName in specialRenderersConfig;\n}\n\nexport interface InternalRendererConfig<P> {\n  Renderer: ComponentType<P>;\n  rendererProps: P;\n}\n/**\n * Resuse internal renderers logic for infinite customization!\n *\n * @remarks `tagName` must be invariant, i.e. it cannot change. You would\n * otherwise break the rules of hooks.\n *\n * @param tagName - **Invariant** The tag name to extend.\n * @param props - The props passed to the custom renderer.\n * @typeParam T - The name of the tag to target.\n * @returns An object with two fields: `Renderer` (the internal react\n * component) and `rendererProps`, the internal component props.\n *\n * @public\n */\nexport default function useInternalRenderer<T extends TagName>(\n  tagName: T,\n  props: InternalRendererProps<any>\n): T extends InternalSpecialRenderedTag\n  ? InternalRendererConfig<ReturnType<typeof specialRenderersConfig[T]['hook']>>\n  : InternalRendererConfig<TDefaultRendererProps<any>> {\n  const { TDefaultRenderer, ...rendererProps } = props;\n  if (hasSpecialInternalRenderer(tagName)) {\n    return {\n      Renderer: specialRenderersConfig[tagName].Element || TDefaultRenderer,\n      rendererProps: specialRenderersConfig[tagName].hook(props as any)\n    } as any;\n  }\n  return {\n    Renderer: TDefaultRenderer,\n    rendererProps\n  } as any;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}