{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GenericCSSPropertyValidator = void 0;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nclass GenericCSSPropertyValidator {\n  constructor(_ref, isShorthand) {\n    let {\n      model,\n      config,\n      propertyName\n    } = _ref;\n    _defineProperty(this, \"model\", void 0);\n    _defineProperty(this, \"config\", void 0);\n    _defineProperty(this, \"compatCategory\", void 0);\n    _defineProperty(this, \"propagationCategory\", void 0);\n    _defineProperty(this, \"displayCategory\", void 0);\n    _defineProperty(this, \"propertyName\", void 0);\n    _defineProperty(this, \"_isShorthand\", void 0);\n    this.model = model;\n    this.config = config;\n    this.compatCategory = model.translatable ? 'native' : 'web';\n    this.propagationCategory = model.inheritable ? 'flow' : 'retain';\n    this.displayCategory = model.display;\n    this.propertyName = propertyName;\n    this._isShorthand = isShorthand;\n  }\n  /**\n   * Normalize value from inline styles\n   *\n   * @param value\n   */\n\n  isShorthand() {\n    return this._isShorthand;\n  }\n}\nexports.GenericCSSPropertyValidator = GenericCSSPropertyValidator;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAUO,MAAeA,2BAAf,CAIP;EASEC,WAAW,OAETC,WAFS,EAGT;IAAA,IAFA;MAAEC,KAAF;MAASC,MAAT;MAAiBC;IAAjB,CADS;IAGTC;IAAAA;IAAAA;IAAAA;IAAAA;IAAAA;IAAAA;IACA,KAAKH,KAAL,GAAaA,KAAb;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKG,cAAL,GAAsBJ,KAAK,CAACK,YAAN,GAAqB,QAArB,GAAgC,KAAtD;IACA,KAAKC,mBAAL,GAA2BN,KAAK,CAACO,WAAN,GAAoB,MAApB,GAA6B,QAAxD;IACA,KAAKC,eAAL,GAAuBR,KAAK,CAACS,OAA7B;IACA,KAAKP,YAAL,GAAoBA,YAApB;IACA,KAAKQ,YAAL,GAAoBX,WAApB;EACD;EAED;AACF;AACA;AACA;AACA;;EAYEA,WAAW,GAAY;IACrB,OAAO,KAAKW,YAAZ;EACD;AAxCH","names":["GenericCSSPropertyValidator","constructor","isShorthand","model","config","propertyName","_defineProperty","compatCategory","translatable","propagationCategory","inheritable","displayCategory","display","_isShorthand"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/@native-html/css-processor/lib/commonjs/validators/GenericPropertyValidator.ts"],"sourcesContent":["import { CSSProcessorConfig } from '../config';\nimport { CSSPropertyModel, CSSPropertyValidatorParams } from './types';\nimport {\n  CSSPropertyCompatCategory,\n  CSSPropertyDisplayCategory,\n  CSSPropertyPropagationCategory,\n  CSSPropertySpecs\n} from '../processor-types';\nimport { ShortMergeRequest } from '../ShortMergeRequest';\n\nexport abstract class GenericCSSPropertyValidator<\n  C extends CSSPropertyModel = any,\n  N = any\n> implements CSSPropertySpecs\n{\n  protected readonly model: C;\n  protected readonly config: CSSProcessorConfig;\n  public readonly compatCategory: CSSPropertyCompatCategory;\n  public readonly propagationCategory: CSSPropertyPropagationCategory;\n  public readonly displayCategory: CSSPropertyDisplayCategory;\n  public readonly propertyName: string;\n  private readonly _isShorthand: boolean;\n\n  constructor(\n    { model, config, propertyName }: CSSPropertyValidatorParams<C>,\n    isShorthand: boolean\n  ) {\n    this.model = model;\n    this.config = config;\n    this.compatCategory = model.translatable ? 'native' : 'web';\n    this.propagationCategory = model.inheritable ? 'flow' : 'retain';\n    this.displayCategory = model.display;\n    this.propertyName = propertyName;\n    this._isShorthand = isShorthand;\n  }\n\n  /**\n   * Normalize value from inline styles\n   *\n   * @param value\n   */\n  abstract normalizeInlineCSSValue(\n    value: string | N\n  ): ShortMergeRequest | N | null;\n\n  /**\n   * Normalize value from native styles.\n   *\n   * @param value\n   */\n  abstract normalizeNativeValue(value: N): ShortMergeRequest | N | null;\n\n  isShorthand(): boolean {\n    return this._isShorthand;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}