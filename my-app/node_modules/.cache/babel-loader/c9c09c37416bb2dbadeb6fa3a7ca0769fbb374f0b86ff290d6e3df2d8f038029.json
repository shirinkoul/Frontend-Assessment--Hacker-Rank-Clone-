{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getNativePropsForTNode;\nvar _react = _interopRequireDefault(require(\"react\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst empty = {};\n/**\n * Extract React Native props for a given {@link TNode}, such as those which\n * would be passed to `Text`, `View` or `GenericPressable` by `TDefaultRenderer`.\n *\n * This helper function is peculiarly useful when one wants a custom renderer\n * which uses a different native component, for example `Animated.Text` instead\n * of default `Text`.\n *\n * @public\n *\n * @example\n *\n * ```tsx\n * import React from 'react';\n * import { Animated } from 'react-native';\n * import { CustomTextualRenderer, getNativePropsForTNode } from 'react-native-render-html';\n *\n * const AnimatedSpanRenderer: CustomTextualRenderer = (props) => {\n *   const nativeProps = getNativePropsForTNode(props);\n *   // This is equivalent to a TDefaultRenderer which `Text` is replaced\n *   // with Animated.Text\n *   return <Animated.Text {...nativeProps} />;\n * }\n * ```\n */\n\nfunction getNativePropsForTNode(props) {\n  var _tnode$getReactNative, _ref;\n  const {\n    tnode,\n    style,\n    type,\n    nativeProps: passedNativeProps,\n    onPress,\n    children: overridenChildren,\n    propsForChildren,\n    viewProps,\n    textProps,\n    TNodeChildrenRenderer\n  } = props;\n  const children = overridenChildren || (tnode.type === 'text' ? tnode.data : /*#__PURE__*/_react.default.createElement(TNodeChildrenRenderer, {\n    tnode,\n    propsForChildren\n  }));\n  const switchProp = type === 'block' ? viewProps : textProps;\n  const propsFromModel = ((_tnode$getReactNative = tnode.getReactNativeProps()) === null || _tnode$getReactNative === void 0 ? void 0 : _tnode$getReactNative[type === 'block' ? 'view' : 'text']) || empty;\n  const syntheticOnPress = (_ref = onPress !== null && onPress !== void 0 ? onPress : passedNativeProps === null || passedNativeProps === void 0 ? void 0 : passedNativeProps.onPress) !== null && _ref !== void 0 ? _ref : propsFromModel.onPress;\n  const nativeProps = {\n    ...(typeof syntheticOnPress === 'function' ? {\n      accessibilityRole: type === 'block' ? 'button' : 'link'\n    } : null),\n    ...propsFromModel,\n    ...passedNativeProps,\n    ...switchProp,\n    children,\n    onPress: syntheticOnPress,\n    style: [style, passedNativeProps === null || passedNativeProps === void 0 ? void 0 : passedNativeProps.style, switchProp.style],\n    testID: tnode.tagName || undefined\n  };\n  return nativeProps;\n}","map":{"version":3,"mappings":";;;;;;AACA;;;;;;AAIA,MAAMA,KAAU,GAAG,EAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACe,SAASC,sBAAT,CAGbC,KAHa,EAIwD;EAAA;EACrE,MAAM;IACJC,KADI;IAEJC,KAFI;IAGJC,IAHI;IAIJC,WAAW,EAAEC,iBAJT;IAKJC,OALI;IAMJC,QAAQ,EAAEC,iBANN;IAOJC,gBAPI;IAQJC,SARI;IASJC,SATI;IAUJC;EAVI,IAWFZ,KAXJ;EAYA,MAAMO,QAAQ,GACZC,iBAAiB,KAChBP,KAAK,CAACE,IAAN,KAAe,MAAf,GACIF,KAAD,CAAiBY,IADpB,gBAEGC,eAAMC,aAAN,CAAoBH,qBAApB,EAA2C;IACzCX,KADyC;IAEzCQ;EAFyC,CAA3C,CAHa,CADnB;EAQA,MAAMO,UAAU,GAAGb,IAAI,KAAK,OAAT,GAAmBO,SAAnB,GAA+BC,SAAlD;EACA,MAAMM,cAAc,GAClB,+BAAK,CAACC,mBAAN,kFAA8Bf,IAAI,KAAK,OAAT,GAAmB,MAAnB,GAA4B,MAA1D,MAAqEL,KADvE;EAEA,MAAMqB,gBAAgB,WACpBb,OADoB,aACpBA,OADoB,cACpBA,OADoB,GACTD,iBADS,aACTA,iBADS,uBACTA,iBAAiB,CAAEC,OADV,uCACqBW,cAAc,CAACX,OAD1D;EAEA,MAAMF,WAAkC,GAAG;IACzC,IAAI,OAAOe,gBAAP,KAA4B,UAA5B,GACC;MAAEC,iBAAiB,EAAEjB,IAAI,KAAK,OAAT,GAAmB,QAAnB,GAA8B;IAAnD,CADD,GAEA,IAFJ,CADyC;IAIzC,GAAGc,cAJsC;IAKzC,GAAGZ,iBALsC;IAMzC,GAAGW,UANsC;IAOzCT,QAPyC;IAQzCD,OAAO,EAAEa,gBARgC;IASzCjB,KAAK,EAAE,CAACA,KAAD,EAAQG,iBAAR,aAAQA,iBAAR,uBAAQA,iBAAiB,CAAEH,KAA3B,EAAkCc,UAAU,CAACd,KAA7C,CATkC;IAUzCmB,MAAM,EAAEpB,KAAK,CAACqB,OAAN,IAAiBC;EAVgB,CAA3C;EAYA,OAAOnB,WAAP;AACD","names":["empty","getNativePropsForTNode","props","tnode","style","type","nativeProps","passedNativeProps","onPress","children","overridenChildren","propsForChildren","viewProps","textProps","TNodeChildrenRenderer","data","React","createElement","switchProp","propsFromModel","getReactNativeProps","syntheticOnPress","accessibilityRole","testID","tagName","undefined"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/react-native-render-html/lib/commonjs/helpers/getNativePropsForTNode.ts"],"sourcesContent":["import { TBlock, TPhrasing, TText } from '@native-html/transient-render-engine';\nimport React from 'react';\nimport { TextProps, ViewProps } from 'react-native';\nimport { TDefaultRendererProps } from '../shared-types';\n\nconst empty: any = {};\n\n/**\n * Extract React Native props for a given {@link TNode}, such as those which\n * would be passed to `Text`, `View` or `GenericPressable` by `TDefaultRenderer`.\n *\n * This helper function is peculiarly useful when one wants a custom renderer\n * which uses a different native component, for example `Animated.Text` instead\n * of default `Text`.\n *\n * @public\n *\n * @example\n *\n * ```tsx\n * import React from 'react';\n * import { Animated } from 'react-native';\n * import { CustomTextualRenderer, getNativePropsForTNode } from 'react-native-render-html';\n *\n * const AnimatedSpanRenderer: CustomTextualRenderer = (props) => {\n *   const nativeProps = getNativePropsForTNode(props);\n *   // This is equivalent to a TDefaultRenderer which `Text` is replaced\n *   // with Animated.Text\n *   return <Animated.Text {...nativeProps} />;\n * }\n * ```\n */\nexport default function getNativePropsForTNode<\n  T extends TPhrasing | TText | TBlock\n>(\n  props: TDefaultRendererProps<T>\n): T extends TBlock ? ViewProps & { onPress?: () => void } : TextProps {\n  const {\n    tnode,\n    style,\n    type,\n    nativeProps: passedNativeProps,\n    onPress,\n    children: overridenChildren,\n    propsForChildren,\n    viewProps,\n    textProps,\n    TNodeChildrenRenderer\n  } = props;\n  const children =\n    overridenChildren ||\n    (tnode.type === 'text'\n      ? (tnode as TText).data\n      : React.createElement(TNodeChildrenRenderer, {\n          tnode,\n          propsForChildren\n        }));\n  const switchProp = type === 'block' ? viewProps : textProps;\n  const propsFromModel =\n    tnode.getReactNativeProps()?.[type === 'block' ? 'view' : 'text'] || empty;\n  const syntheticOnPress =\n    onPress ?? passedNativeProps?.onPress ?? propsFromModel.onPress;\n  const nativeProps: TextProps | ViewProps = {\n    ...(typeof syntheticOnPress === 'function'\n      ? ({ accessibilityRole: type === 'block' ? 'button' : 'link' } as const)\n      : null),\n    ...propsFromModel,\n    ...passedNativeProps,\n    ...switchProp,\n    children,\n    onPress: syntheticOnPress,\n    style: [style, passedNativeProps?.style, switchProp.style],\n    testID: tnode.tagName || undefined\n  };\n  return nativeProps as any;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}