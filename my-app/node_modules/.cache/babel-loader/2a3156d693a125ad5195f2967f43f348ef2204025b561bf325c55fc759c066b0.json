{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useTNodeChildrenProps = useTNodeChildrenProps;\nexports.default = void 0;\nvar _SharedPropsProvider = require(\"./context/SharedPropsProvider\");\nvar _TChildrenRenderer = require(\"./TChildrenRenderer\");\nvar _renderChildren = _interopRequireDefault(require(\"./renderChildren\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction isCollapsible(tnode) {\n  return tnode.type === 'block' || tnode.type === 'phrasing';\n}\n/**\n * A hook especially useful when one need to tamper with children in a custom\n * renderer. Should be used with {@link TChildrenRenderer}.\n *\n * @example\n * For example, a custom renderer which inserts ads in an article:\n *\n * ```tsx\n * function ArticleRenderer(props) {\n *   const { tnode, TDefaultRenderer, ...defaultRendererProps } = props;\n *   const tchildrenProps = useTNodeChildrenProps(props);\n *   const firstChildrenChunk = tnode.children.slice(0, 2);\n *   const secondChildrenChunk = tnode.children.slice(2, 4);\n *   const thirdChildrenChunk = tnode.children.slice(4, 5);\n *   return (\n *     <TDefaultRenderer tnode={tnode} {...defaultRendererProps}>\n *       <TChildrenRenderer {...tchildrenProps} tchildren={firstChildrenChunk} />\n *       {firstChildrenChunk.length === 2 ? <AdComponent /> : null}\n *       <TChildrenRenderer {...tchildrenProps} tchildren={secondChildrenChunk} />\n *       {secondChildrenChunk.length === 2 ? <AdComponent /> : null}\n *       <TChildrenRenderer {...tchildrenProps} tchildren={thirdChildrenChunk} />\n *     </TDefaultRenderer>\n *   );\n * };\n * ```\n */\n\nfunction useTNodeChildrenProps(_ref) {\n  let {\n    tnode,\n    propsForChildren,\n    disableMarginCollapsing = false,\n    renderChild\n  } = _ref;\n  const {\n    enableExperimentalMarginCollapsing\n  } = (0, _SharedPropsProvider.useSharedProps)();\n  const shouldCollapseChildren = enableExperimentalMarginCollapsing && !disableMarginCollapsing && isCollapsible(tnode);\n  return {\n    propsForChildren,\n    disableMarginCollapsing: !shouldCollapseChildren,\n    tchildren: tnode.children,\n    renderChild\n  };\n}\n/**\n * A component to render all children of a {@link TNode}.\n */\n\nfunction TNodeChildrenRenderer(props) {\n  if (props.tnode.type === 'text') {\n    // see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20544\n    return props.tnode.data;\n  } // A tnode type will never change. We can safely\n  // ignore the non-conditional rule of hooks.\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  return (0, _renderChildren.default)(useTNodeChildrenProps(props));\n}\n/**\n * @ignore\n */\n\nTNodeChildrenRenderer.defaultProps = _TChildrenRenderer.tchildrenRendererDefaultProps;\nvar _default = TNodeChildrenRenderer;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;AAEA;AACA;AAKA;;;;;;AAEA,SAASA,aAAT,CAAuBC,KAAvB,EAAqC;EACnC,OAAOA,KAAK,CAACC,IAAN,KAAe,OAAf,IAA0BD,KAAK,CAACC,IAAN,KAAe,UAAhD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASC,qBAAT,OAKgD;EAAA,IALjB;IACpCF,KADoC;IAEpCG,gBAFoC;IAGpCC,uBAAuB,GAAG,KAHU;IAIpCC;EAJoC,CAA/B;EAML,MAAM;IAAEC;EAAF,IAAyC,0CAA/C;EACA,MAAMC,sBAAsB,GAC1BD,kCAAkC,IAClC,CAACF,uBADD,IAEAL,aAAa,CAACC,KAAD,CAHf;EAIA,OAAO;IACLG,gBADK;IAELC,uBAAuB,EAAE,CAACG,sBAFrB;IAGLC,SAAS,EAAER,KAAK,CAACS,QAHZ;IAILJ;EAJK,CAAP;AAMD;AAED;AACA;AACA;;AACA,SAASK,qBAAT,CACEC,KADF,EAEgB;EACd,IAAIA,KAAK,CAACX,KAAN,CAAYC,IAAZ,KAAqB,MAAzB,EAAiC;IAC/B;IACA,OAAOU,KAAK,CAACX,KAAN,CAAYY,IAAnB;EACD,CAJa,CAKd;EACA;EACA;;EACA,OAAO,6BAAeV,qBAAqB,CAACS,KAAD,CAApC,CAAP;AACD;AAED;AACA;AACA;;AACAD,qBAAqB,CAACG,YAAtB,GAAqCC,gDAArC;eAEeJ,qB","names":["isCollapsible","tnode","type","useTNodeChildrenProps","propsForChildren","disableMarginCollapsing","renderChild","enableExperimentalMarginCollapsing","shouldCollapseChildren","tchildren","children","TNodeChildrenRenderer","props","data","defaultProps","tchildrenRendererDefaultProps"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/react-native-render-html/lib/commonjs/TNodeChildrenRenderer.tsx"],"sourcesContent":["import { ReactElement } from 'react';\nimport { TNode } from '@native-html/transient-render-engine';\nimport { useSharedProps } from './context/SharedPropsProvider';\nimport { tchildrenRendererDefaultProps } from './TChildrenRenderer';\nimport {\n  TChildrenRendererProps,\n  TNodeChildrenRendererProps\n} from './shared-types';\nimport renderChildren from './renderChildren';\n\nfunction isCollapsible(tnode: TNode) {\n  return tnode.type === 'block' || tnode.type === 'phrasing';\n}\n\n/**\n * A hook especially useful when one need to tamper with children in a custom\n * renderer. Should be used with {@link TChildrenRenderer}.\n *\n * @example\n * For example, a custom renderer which inserts ads in an article:\n *\n * ```tsx\n * function ArticleRenderer(props) {\n *   const { tnode, TDefaultRenderer, ...defaultRendererProps } = props;\n *   const tchildrenProps = useTNodeChildrenProps(props);\n *   const firstChildrenChunk = tnode.children.slice(0, 2);\n *   const secondChildrenChunk = tnode.children.slice(2, 4);\n *   const thirdChildrenChunk = tnode.children.slice(4, 5);\n *   return (\n *     <TDefaultRenderer tnode={tnode} {...defaultRendererProps}>\n *       <TChildrenRenderer {...tchildrenProps} tchildren={firstChildrenChunk} />\n *       {firstChildrenChunk.length === 2 ? <AdComponent /> : null}\n *       <TChildrenRenderer {...tchildrenProps} tchildren={secondChildrenChunk} />\n *       {secondChildrenChunk.length === 2 ? <AdComponent /> : null}\n *       <TChildrenRenderer {...tchildrenProps} tchildren={thirdChildrenChunk} />\n *     </TDefaultRenderer>\n *   );\n * };\n * ```\n */\nexport function useTNodeChildrenProps({\n  tnode,\n  propsForChildren,\n  disableMarginCollapsing = false,\n  renderChild\n}: TNodeChildrenRendererProps): TChildrenRendererProps {\n  const { enableExperimentalMarginCollapsing } = useSharedProps();\n  const shouldCollapseChildren =\n    enableExperimentalMarginCollapsing &&\n    !disableMarginCollapsing &&\n    isCollapsible(tnode);\n  return {\n    propsForChildren,\n    disableMarginCollapsing: !shouldCollapseChildren,\n    tchildren: tnode.children,\n    renderChild\n  };\n}\n\n/**\n * A component to render all children of a {@link TNode}.\n */\nfunction TNodeChildrenRenderer(\n  props: TNodeChildrenRendererProps\n): ReactElement {\n  if (props.tnode.type === 'text') {\n    // see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20544\n    return props.tnode.data as unknown as ReactElement;\n  }\n  // A tnode type will never change. We can safely\n  // ignore the non-conditional rule of hooks.\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return renderChildren(useTNodeChildrenProps(props));\n}\n\n/**\n * @ignore\n */\nTNodeChildrenRenderer.defaultProps = tchildrenRendererDefaultProps;\n\nexport default TNodeChildrenRenderer;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}