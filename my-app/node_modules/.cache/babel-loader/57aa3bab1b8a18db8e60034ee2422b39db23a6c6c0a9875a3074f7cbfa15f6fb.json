{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TRenderEngine = void 0;\nvar _collapse = require(\"./flow/collapse\");\nvar _hoist = require(\"./flow/hoist\");\nvar _translate = require(\"./flow/translate\");\nvar _omit = _interopRequireDefault(require(\"ramda/src/omit\"));\nvar _cssProcessor = require(\"@native-html/css-processor\");\nvar _parseDocument = _interopRequireDefault(require(\"./dom/parseDocument\"));\nvar _TStylesMerger = require(\"./styles/TStylesMerger\");\nvar _defaults = require(\"./styles/defaults\");\nvar _TStyles = require(\"./styles/TStyles\");\nvar _HTMLModelRegistry = _interopRequireDefault(require(\"./model/HTMLModelRegistry\"));\nvar _domUtils = require(\"./dom/dom-utils\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction createStylesConfig(options) {\n  var _options$stylesConfig, _options$stylesConfig2;\n  const enableUserAgentStyles = typeof (options === null || options === void 0 ? void 0 : (_options$stylesConfig = options.stylesConfig) === null || _options$stylesConfig === void 0 ? void 0 : _options$stylesConfig.enableUserAgentStyles) === 'boolean' ? options.stylesConfig.enableUserAgentStyles : _defaults.defaultStylesConfig.enableUserAgentStyles;\n  const baseStyle = {\n    ...(enableUserAgentStyles ? _defaults.defaultStylesConfig.baseStyle : (0, _omit.default)(['fontSize'], _defaults.defaultStylesConfig.baseStyle)),\n    ...(options === null || options === void 0 ? void 0 : (_options$stylesConfig2 = options.stylesConfig) === null || _options$stylesConfig2 === void 0 ? void 0 : _options$stylesConfig2.baseStyle)\n  };\n  return {\n    ..._defaults.defaultStylesConfig,\n    ...(options === null || options === void 0 ? void 0 : options.stylesConfig),\n    baseStyle\n  };\n}\n/**\n * The Transient Render Engine.\n *\n * @public\n */\n\nclass TRenderEngine {\n  constructor(options) {\n    var _options$dangerouslyD, _options$dangerouslyD2, _options$cssProcessor, _stylesConfig$baseSty;\n    _defineProperty(this, \"htmlParserOptions\", void 0);\n    _defineProperty(this, \"dataFlowParams\", void 0);\n    _defineProperty(this, \"hoistingEnabled\", void 0);\n    _defineProperty(this, \"whitespaceCollapsingEnabled\", void 0);\n    _defineProperty(this, \"selectDomRoot\", void 0);\n    const stylesConfig = createStylesConfig(options);\n    this.hoistingEnabled = !((_options$dangerouslyD = options === null || options === void 0 ? void 0 : options.dangerouslyDisableHoisting) !== null && _options$dangerouslyD !== void 0 ? _options$dangerouslyD : false);\n    this.whitespaceCollapsingEnabled = !((_options$dangerouslyD2 = options === null || options === void 0 ? void 0 : options.dangerouslyDisableWhitespaceCollapsing) !== null && _options$dangerouslyD2 !== void 0 ? _options$dangerouslyD2 : false);\n    const modelRegistry = new _HTMLModelRegistry.default(options === null || options === void 0 ? void 0 : options.customizeHTMLModels);\n    const userSelectedFontSize = (options === null || options === void 0 ? void 0 : (_options$cssProcessor = options.cssProcessorConfig) === null || _options$cssProcessor === void 0 ? void 0 : _options$cssProcessor.rootFontSize) || ((_stylesConfig$baseSty = stylesConfig.baseStyle) === null || _stylesConfig$baseSty === void 0 ? void 0 : _stylesConfig$baseSty.fontSize); // TODO log a warning when type is string\n\n    const stylesMerger = new _TStylesMerger.TStylesMerger(stylesConfig, modelRegistry, {\n      ..._cssProcessor.defaultCSSProcessorConfig,\n      ...(options === null || options === void 0 ? void 0 : options.cssProcessorConfig),\n      rootFontSize: typeof userSelectedFontSize === 'number' ? userSelectedFontSize : 14\n    });\n    this.htmlParserOptions = {\n      decodeEntities: true,\n      lowerCaseTags: true,\n      ignoredTags: options === null || options === void 0 ? void 0 : options.ignoredDomTags,\n      ignoreNode: options === null || options === void 0 ? void 0 : options.ignoreDomNode,\n      visitors: options === null || options === void 0 ? void 0 : options.domVisitors,\n      ...(options === null || options === void 0 ? void 0 : options.htmlParserOptions)\n    };\n    this.dataFlowParams = {\n      stylesMerger,\n      modelRegistry,\n      setMarkersForTNode: options === null || options === void 0 ? void 0 : options.setMarkersForTNode,\n      baseStyles: new _TStyles.TStyles(stylesMerger.compileStyleDeclaration(stylesConfig.baseStyle)),\n      removeLineBreaksAroundEastAsianDiscardSet: (options === null || options === void 0 ? void 0 : options.removeLineBreaksAroundEastAsianDiscardSet) || false\n    };\n    this.selectDomRoot = options === null || options === void 0 ? void 0 : options.selectDomRoot;\n  }\n  normalizeDocument(document) {\n    let body;\n    let head;\n    for (const child of document.children) {\n      if (body && head) {\n        break;\n      }\n      if ((0, _domUtils.isDomElement)(child) && child.tagName === 'body') {\n        body = child;\n      }\n      if ((0, _domUtils.isDomElement)(child) && child.tagName === 'head') {\n        head = child;\n      }\n    } //@ts-ignore\n\n    if (!body && !head) {\n      body = new _domUtils.Element('body', {});\n      body.childNodes = document.children;\n      document.children.forEach(c => {\n        c.parent = body;\n        c.parentNode = body;\n      });\n      body.parent = document;\n      body.parentNode = document;\n      document.childNodes = [body];\n    }\n    return document;\n  }\n  parseDocument(html) {\n    let document = (0, _parseDocument.default)(html, this.htmlParserOptions);\n    if (this.selectDomRoot) {\n      const selected = this.selectDomRoot(document);\n      if (selected && selected !== document) {\n        document.childNodes = [selected];\n        selected.parent = document;\n      }\n    }\n    for (const child of document.children) {\n      if ((0, _domUtils.isDomElement)(child) && child.tagName === 'html') {\n        document = child;\n        break;\n      }\n    }\n    return this.normalizeDocument(document);\n  }\n  buildTTreeFromDoc(document) {\n    const tdoc = (0, _translate.translateDocument)(document, this.dataFlowParams);\n    const hoistedTDoc = this.hoistingEnabled ? (0, _hoist.hoist)(tdoc) : tdoc;\n    const collapsedTDoc = this.whitespaceCollapsingEnabled ? (0, _collapse.collapse)(hoistedTDoc) : tdoc;\n    return collapsedTDoc;\n  }\n  buildTTree(html) {\n    return this.buildTTreeFromDoc(this.parseDocument(html));\n  }\n  getHTMLElementsModels() {\n    return this.dataFlowParams.modelRegistry.modelRecords;\n  }\n}\nexports.TRenderEngine = TRenderEngine;","map":{"version":3,"mappings":"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","names":["createStylesConfig","options","enableUserAgentStyles","stylesConfig","_options$stylesConfig","defaultStylesConfig","baseStyle","_options$stylesConfig2","TRenderEngine","constructor","_defineProperty","hoistingEnabled","dangerouslyDisableHoisting","whitespaceCollapsingEnabled","dangerouslyDisableWhitespaceCollapsing","modelRegistry","HTMLModelRegistry","customizeHTMLModels","userSelectedFontSize","cssProcessorConfig","rootFontSize","_stylesConfig$baseSty","fontSize","stylesMerger","TStylesMerger","defaultCSSProcessorConfig","htmlParserOptions","decodeEntities","lowerCaseTags","ignoredTags","ignoredDomTags","ignoreNode","ignoreDomNode","visitors","domVisitors","dataFlowParams","setMarkersForTNode","baseStyles","TStyles","compileStyleDeclaration","removeLineBreaksAroundEastAsianDiscardSet","selectDomRoot","normalizeDocument","document","body","head","child","children","tagName","Element","childNodes","forEach","c","parent","parentNode","parseDocument","html","selected","buildTTreeFromDoc","tdoc","hoistedTDoc","collapsedTDoc","buildTTree","getHTMLElementsModels","modelRecords"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/@native-html/transient-render-engine/lib/commonjs/TRenderEngine.ts"],"sourcesContent":["import { collapse } from './flow/collapse';\nimport { hoist } from './flow/hoist';\nimport { translateDocument } from './flow/translate';\nimport { ParserOptions as HTMLParserOptions } from 'htmlparser2';\nimport omit from 'ramda/src/omit';\nimport {\n  CSSProcessorConfig,\n  defaultCSSProcessorConfig\n} from '@native-html/css-processor';\nimport parseDocument from './dom/parseDocument';\nimport { StylesConfig } from './styles/types';\nimport { TStylesMerger } from './styles/TStylesMerger';\nimport { defaultStylesConfig } from './styles/defaults';\nimport { TStyles } from './styles/TStyles';\nimport HTMLModelRegistry from './model/HTMLModelRegistry';\nimport { HTMLModelRecord, TagName } from './model/model-types';\nimport { DefaultHTMLElementModelsStatic } from './model/defaultHTMLElementModels';\nimport { DataFlowParams } from './flow/types';\nimport {\n  Document,\n  Element,\n  Node,\n  NodeWithChildren,\n  isDomElement\n} from './dom/dom-utils';\nimport { SetMarkersForTNode, TDocument } from './tree/tree-types';\nimport { DomHandlerOptions, DomVisitorCallbacks } from './dom/DomHandler';\n\nexport interface TRenderEngineOptions<E extends string = never> {\n  /**\n   * Customization for CSS inline processing.\n   */\n  readonly cssProcessorConfig?: Partial<CSSProcessorConfig>;\n  /**\n   * Options for htmlparser2 library parser.\n   */\n  readonly htmlParserOptions?: Readonly<HTMLParserOptions>;\n  /**\n   * Various configuration for styling.\n   */\n  readonly stylesConfig?: StylesConfig;\n  /**\n   * Customize supported tags in the engine.\n   *\n   * @remarks If you need to add new tags, always use lowercase names.\n   */\n  readonly customizeHTMLModels?: (\n    defaultHTMLElementModels: DefaultHTMLElementModelsStatic\n  ) => HTMLModelRecord<TagName | E>;\n  /**\n   * Remove line breaks around special east-asian characters such as defined here:\n   * https://www.w3.org/TR/2020/WD-css-text-3-20200429/#line-break-transform\n   *\n   * @defaultValue false\n   */\n  readonly removeLineBreaksAroundEastAsianDiscardSet?: boolean;\n  /**\n   * A list of tags which should not be included in the DOM.\n   */\n  readonly ignoredDomTags?: string[];\n\n  /**\n   * An object which callbacks will be invoked when a DOM element or text node\n   * has been parsed and its children attached.\n   *\n   * @remark Each callback is applied during parsing, thus with very little\n   * overhead. However, it means that one node next siblings won't be\n   * available. If you need some siblings logic, apply this logic to the\n   * children of this node.\n   */\n  readonly domVisitors?: DomVisitorCallbacks;\n\n  /**\n   * Ignore specific DOM nodes.\n   *\n   * **Warning**: when this function is invoked, the node has not yet been\n   * attached to its parent or siblings. Use the second argument (`parent`)\n   * if you need to perform logic based on parent.\n   *\n   * @remarks The function is applied during parsing, thus with very little\n   * overhead. However, it means that one node next siblings won't be\n   * available.\n   *\n   * @returns `true` if this node should not be included in the DOM, anything\n   * else otherwise.\n   */\n  readonly ignoreDomNode?: (\n    node: Node,\n    parent: NodeWithChildren\n  ) => boolean | void | unknown;\n\n  /**\n   * Select the DOM root before TTree generation. For example, you could\n   * iterate over children until you reach an article element and return this\n   * element.\n   *\n   * @remarks Applied after DOM parsing, before normalization and TTree\n   * construction. Before normalization implies that a body will be added in\n   * the tree **after** selecting root.\n   */\n  readonly selectDomRoot?: (node: NodeWithChildren) => any;\n\n  /**\n   * Customize markers logic by extracting markers from TNode properties such\n   * as classes, ids, attributes, tagName ...\n   *\n   * @remarks If you are using JavaScript, you can use module augmentation and\n   * declaration merging to add properties to the {@link Markers} shape.\n   */\n  readonly setMarkersForTNode?: SetMarkersForTNode;\n\n  /**\n   * Disable hoisting. Note that your layout might break!\n   */\n  readonly dangerouslyDisableHoisting?: boolean;\n  /**\n   * Disable whitespace collapsing. Especially useful if your html is\n   * being pre-processed server-side with a minifier.\n   */\n  readonly dangerouslyDisableWhitespaceCollapsing?: boolean;\n}\n\nfunction createStylesConfig(\n  options?: TRenderEngineOptions\n): Required<StylesConfig> {\n  const enableUserAgentStyles =\n    typeof options?.stylesConfig?.enableUserAgentStyles === 'boolean'\n      ? options.stylesConfig.enableUserAgentStyles\n      : defaultStylesConfig.enableUserAgentStyles;\n  const baseStyle = {\n    ...(enableUserAgentStyles\n      ? defaultStylesConfig.baseStyle\n      : omit(['fontSize'], defaultStylesConfig.baseStyle)),\n    ...options?.stylesConfig?.baseStyle\n  };\n  return {\n    ...defaultStylesConfig,\n    ...options?.stylesConfig,\n    baseStyle\n  };\n}\n\n/**\n * The Transient Render Engine.\n *\n * @public\n */\nexport class TRenderEngine {\n  private htmlParserOptions: Readonly<HTMLParserOptions & DomHandlerOptions>;\n  private dataFlowParams: DataFlowParams;\n  private hoistingEnabled: boolean;\n  private whitespaceCollapsingEnabled: boolean;\n  private selectDomRoot: TRenderEngineOptions['selectDomRoot'];\n  constructor(options?: TRenderEngineOptions) {\n    const stylesConfig = createStylesConfig(options);\n    this.hoistingEnabled = !(options?.dangerouslyDisableHoisting ?? false);\n    this.whitespaceCollapsingEnabled = !(\n      options?.dangerouslyDisableWhitespaceCollapsing ?? false\n    );\n    const modelRegistry = new HTMLModelRegistry(options?.customizeHTMLModels);\n    const userSelectedFontSize =\n      options?.cssProcessorConfig?.rootFontSize ||\n      stylesConfig.baseStyle?.fontSize;\n    // TODO log a warning when type is string\n    const stylesMerger = new TStylesMerger(stylesConfig, modelRegistry, {\n      ...defaultCSSProcessorConfig,\n      ...options?.cssProcessorConfig,\n      rootFontSize:\n        typeof userSelectedFontSize === 'number' ? userSelectedFontSize : 14\n    });\n    this.htmlParserOptions = {\n      decodeEntities: true,\n      lowerCaseTags: true,\n      ignoredTags: options?.ignoredDomTags,\n      ignoreNode: options?.ignoreDomNode,\n      visitors: options?.domVisitors,\n      ...options?.htmlParserOptions\n    };\n    this.dataFlowParams = {\n      stylesMerger,\n      modelRegistry,\n      setMarkersForTNode: options?.setMarkersForTNode,\n      baseStyles: new TStyles(\n        stylesMerger.compileStyleDeclaration(stylesConfig.baseStyle)\n      ),\n      removeLineBreaksAroundEastAsianDiscardSet:\n        options?.removeLineBreaksAroundEastAsianDiscardSet || false\n    };\n    this.selectDomRoot = options?.selectDomRoot;\n  }\n\n  private normalizeDocument(document: Document) {\n    let body: Element | undefined;\n    let head: Element | undefined;\n    for (const child of document.children) {\n      if (body && head) {\n        break;\n      }\n      if (isDomElement(child) && child.tagName === 'body') {\n        body = child;\n      }\n      if (isDomElement(child) && child.tagName === 'head') {\n        head = child;\n      }\n    }\n    //@ts-ignore\n    if (!body && !head) {\n      body = new Element('body', {});\n      body.childNodes = document.children;\n      document.children.forEach((c) => {\n        c.parent = body as Element;\n        c.parentNode = body as Element;\n      });\n      body.parent = document;\n      body.parentNode = document;\n      document.childNodes = [body];\n    }\n    return document;\n  }\n\n  parseDocument(html: string) {\n    let document = parseDocument(html, this.htmlParserOptions);\n    if (this.selectDomRoot) {\n      const selected = this.selectDomRoot(document) as Document;\n      if (selected && selected !== document) {\n        document.childNodes = [selected];\n        selected.parent = document;\n      }\n    }\n    for (const child of document.children) {\n      if (isDomElement(child) && child.tagName === 'html') {\n        document = child;\n        break;\n      }\n    }\n    return this.normalizeDocument(document);\n  }\n\n  buildTTreeFromDoc(document: Document | Element): TDocument {\n    const tdoc = translateDocument(document, this.dataFlowParams);\n    const hoistedTDoc = this.hoistingEnabled ? hoist(tdoc) : tdoc;\n    const collapsedTDoc = this.whitespaceCollapsingEnabled\n      ? collapse(hoistedTDoc)\n      : tdoc;\n    return collapsedTDoc as unknown as TDocument;\n  }\n\n  buildTTree(html: string): TDocument {\n    return this.buildTTreeFromDoc(this.parseDocument(html));\n  }\n\n  getHTMLElementsModels() {\n    return this.dataFlowParams.modelRegistry.modelRecords;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}