{"ast":null,"code":"import codepointLength from './utils/codepointLength';\nimport { DEFAULT_SUFFIX } from './constants';\nconst DEFAULT_SPECS = {\n  suffix: DEFAULT_SUFFIX,\n  prefix: null,\n  reversedMarker: false,\n  reversedCounter: false,\n  fallback: {\n    renderCounter: index => index.toString(),\n    maxCounterLenInRange(min, max) {\n      return Math.max(this.renderCounter(min).length, this.renderCounter(max).length);\n    }\n  },\n  negative: null,\n  range: {\n    min: -Infinity,\n    max: Infinity\n  },\n  padding: null\n};\nconst styleEngineProto = {\n  // Cost-inefficient since it requires iterating over the whole range.\n  maxLengthInRange(min, max) {\n    let len = 0;\n    for (let i = Math.max(0, min); i <= max; i++) {\n      const val = this.formatter(i);\n      len = Math.max(codepointLength(val), len);\n    }\n    return len;\n  },\n  withSpecs(spToMerge) {\n    const next = Object.create(this);\n    next.specs = Object.assign({}, this.specs, spToMerge);\n    return next;\n  },\n  withMaxLengthInRange(cp) {\n    const next = Object.create(this);\n    next.maxLengthInRange = cp;\n    return next;\n  }\n};\nexport default function makeCSEngine(formatter) {\n  let specs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_SPECS;\n  const eng = Object.create(styleEngineProto);\n  eng.specs = specs;\n  eng.formatter = formatter;\n  return eng;\n}","map":{"version":3,"mappings":"AAAA,OAAOA,eAAe,MAAM,yBAAyB;AACrD,SAASC,cAAc,QAAQ,aAAa;AAI5C,MAAMC,aAAa,GAAmB;EACpCC,MAAM,EAAEF,cAAc;EACtBG,MAAM,EAAE,IAAI;EACZC,cAAc,EAAE,KAAK;EACrBC,eAAe,EAAE,KAAK;EACtBC,QAAQ,EAAE;IACRC,aAAa,EAAGC,KAAK,IAAKA,KAAK,CAACC,QAAQ,EAAE;IAC1CC,oBAAoB,CAACC,GAAG,EAAEC,GAAG;MAC3B,OAAOC,IAAI,CAACD,GAAG,CACb,IAAI,CAACL,aAAa,CAACI,GAAG,CAAC,CAACG,MAAM,EAC9B,IAAI,CAACP,aAAa,CAACK,GAAG,CAAC,CAACE,MAAM,CAC/B;IACH;GACD;EACDC,QAAQ,EAAE,IAAI;EACdC,KAAK,EAAE;IACLL,GAAG,EAAE,CAACM,QAAQ;IACdL,GAAG,EAAEK;GACN;EACDC,OAAO,EAAE;CACV;AAED,MAAMC,gBAAgB,GAGlB;EACF;EACAC,gBAAgB,CAAeT,GAAG,EAAEC,GAAG;IACrC,IAAIS,GAAG,GAAG,CAAC;IACX,KAAK,IAAIC,CAAC,GAAGT,IAAI,CAACD,GAAG,CAAC,CAAC,EAAED,GAAG,CAAC,EAAEW,CAAC,IAAIV,GAAG,EAAEU,CAAC,EAAE,EAAE;MAC5C,MAAMC,GAAG,GAAG,IAAI,CAACC,SAAS,CAACF,CAAC,CAAC;MAC7BD,GAAG,GAAGR,IAAI,CAACD,GAAG,CAACb,eAAe,CAACwB,GAAG,CAAC,EAAEF,GAAG,CAAC;;IAE3C,OAAOA,GAAG;EACZ,CAAC;EACDI,SAAS,CAAeC,SAAS;IAC/B,MAAMC,IAAI,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAW;IAC1CF,IAAI,CAACG,KAAK,GAAGF,MAAM,CAACG,MAAM,CAAC,EAAE,EAAE,IAAI,CAACD,KAAK,EAAEJ,SAAS,CAAC;IACrD,OAAOC,IAAI;EACb,CAAC;EACDK,oBAAoB,CAAeC,EAAE;IACnC,MAAMN,IAAI,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAW;IAC1CF,IAAI,CAACP,gBAAgB,GAAGa,EAAE;IAC1B,OAAON,IAAI;EACb;CACD;AAED,eAAc,SAAUO,YAAY,CAClCV,SAAkC,EACG;EAAA,IAArCM,4EAAwB7B,aAAa;EAErC,MAAMkC,GAAG,GAAGP,MAAM,CAACC,MAAM,CAACV,gBAAgB,CAAW;EACrDgB,GAAG,CAACL,KAAK,GAAGA,KAAK;EACjBK,GAAG,CAACX,SAAS,GAAGA,SAAS;EACzB,OAAOW,GAAG;AACZ","names":["codepointLength","DEFAULT_SUFFIX","DEFAULT_SPECS","suffix","prefix","reversedMarker","reversedCounter","fallback","renderCounter","index","toString","maxCounterLenInRange","min","max","Math","length","negative","range","Infinity","padding","styleEngineProto","maxLengthInRange","len","i","val","formatter","withSpecs","spToMerge","next","Object","create","specs","assign","withMaxLengthInRange","cp","makeCSEngine","eng"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/@jsamr/counter-style/src/makeCSEngine.ts"],"sourcesContent":["import codepointLength from './utils/codepointLength';\nimport { DEFAULT_SUFFIX } from './constants';\nimport { Specifications, Engine } from './internal-types';\nimport { InitialCounterFormatter } from './public-types';\n\nconst DEFAULT_SPECS: Specifications = {\n  suffix: DEFAULT_SUFFIX,\n  prefix: null,\n  reversedMarker: false,\n  reversedCounter: false,\n  fallback: {\n    renderCounter: (index) => index.toString(),\n    maxCounterLenInRange(min, max) {\n      return Math.max(\n        this.renderCounter(min).length,\n        this.renderCounter(max).length\n      );\n    }\n  },\n  negative: null,\n  range: {\n    min: -Infinity,\n    max: Infinity\n  },\n  padding: null\n};\n\nconst styleEngineProto: Pick<\n  Engine,\n  'maxLengthInRange' | 'withSpecs' | 'withMaxLengthInRange'\n> = {\n  // Cost-inefficient since it requires iterating over the whole range.\n  maxLengthInRange(this: Engine, min, max) {\n    let len = 0;\n    for (let i = Math.max(0, min); i <= max; i++) {\n      const val = this.formatter(i);\n      len = Math.max(codepointLength(val), len);\n    }\n    return len;\n  },\n  withSpecs(this: Engine, spToMerge) {\n    const next = Object.create(this) as Engine;\n    next.specs = Object.assign({}, this.specs, spToMerge);\n    return next;\n  },\n  withMaxLengthInRange(this: Engine, cp) {\n    const next = Object.create(this) as Engine;\n    next.maxLengthInRange = cp;\n    return next;\n  }\n};\n\nexport default function makeCSEngine(\n  formatter: InitialCounterFormatter,\n  specs: Specifications = DEFAULT_SPECS\n): Engine {\n  const eng = Object.create(styleEngineProto) as Engine;\n  eng.specs = specs;\n  eng.formatter = formatter;\n  return eng;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}