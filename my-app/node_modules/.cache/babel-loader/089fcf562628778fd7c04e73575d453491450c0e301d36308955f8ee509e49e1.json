{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useNormalizedUrl;\nvar _DocumentMetadataProvider = require(\"../context/DocumentMetadataProvider\");\nvar _normalizeResourceLocator = _interopRequireDefault(require(\"../helpers/normalizeResourceLocator\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * This hook transforms relative and protocol-relative URLs to absolute URLs as\n * per {@link https://tools.ietf.org/html/rfc1808 | RFC1808}. The base URL is\n * determined by the `<base />` element, `source.uri` or `source.baseUrl`.\n *\n * @remarks\n * - If there is no `baseUrl` and the initial URL is relative, this hook will\n *   return the initial URL.\n * - If the initial URL is absolute, this hook will return this initial URL.\n *\n * @param initialUrl - The URL before normalization.\n *\n * @public\n */\nfunction useNormalizedUrl(initialUrl) {\n  const {\n    baseUrl\n  } = (0, _DocumentMetadataProvider.useDocumentMetadata)();\n  return (0, _normalizeResourceLocator.default)(initialUrl, baseUrl);\n}","map":{"version":3,"mappings":";;;;;;AAAA;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,gBAAT,CAA0BC,UAA1B,EAA8C;EAC3D,MAAM;IAAEC;EAAF,IAAc,oDAApB;EACA,OAAO,uCAAyBD,UAAzB,EAAqCC,OAArC,CAAP;AACD","names":["useNormalizedUrl","initialUrl","baseUrl"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/react-native-render-html/lib/commonjs/hooks/useNormalizedUrl.ts"],"sourcesContent":["import { useDocumentMetadata } from '../context/DocumentMetadataProvider';\nimport normalizeResourceLocator from '../helpers/normalizeResourceLocator';\n\n/**\n * This hook transforms relative and protocol-relative URLs to absolute URLs as\n * per {@link https://tools.ietf.org/html/rfc1808 | RFC1808}. The base URL is\n * determined by the `<base />` element, `source.uri` or `source.baseUrl`.\n *\n * @remarks\n * - If there is no `baseUrl` and the initial URL is relative, this hook will\n *   return the initial URL.\n * - If the initial URL is absolute, this hook will return this initial URL.\n *\n * @param initialUrl - The URL before normalization.\n *\n * @public\n */\nexport default function useNormalizedUrl(initialUrl: string) {\n  const { baseUrl } = useDocumentMetadata();\n  return normalizeResourceLocator(initialUrl, baseUrl);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}