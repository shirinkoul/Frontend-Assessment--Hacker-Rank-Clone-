{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = buildTREFromConfig;\nvar _transientRenderEngine = _interopRequireDefault(require(\"@native-html/transient-render-engine\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Build a {@link TRenderEngine} instance from a configuration object.\n *\n * @remarks This utility can be useful to test and debug the TRE layer of your\n * application.\n *\n * @param props - The configuration from which a TRE should be built.\n */\nfunction buildTREFromConfig(props) {\n  const {\n    allowedStyles,\n    // TODO fix upstream\n    ignoredStyles = [],\n    ignoredDomTags,\n    ignoreDomNode,\n    domVisitors,\n    htmlParserOptions,\n    baseStyle,\n    classesStyles,\n    tagsStyles,\n    idsStyles,\n    enableCSSInlineProcessing,\n    enableUserAgentStyles,\n    systemFonts = [],\n    fallbackFonts = {},\n    customHTMLElementModels = {},\n    emSize,\n    setMarkersForTNode,\n    selectDomRoot,\n    dangerouslyDisableHoisting,\n    dangerouslyDisableWhitespaceCollapsing\n  } = props;\n  const customizeHTMLModels = Object.keys(customHTMLElementModels).length ? defaultModels => {\n    return {\n      ...defaultModels,\n      ...customHTMLElementModels\n    };\n  } : undefined;\n  const fontMap = {};\n  systemFonts.forEach(font => {\n    fontMap[font] = true;\n  });\n  const isFontSupported = fontFamily => {\n    if (fallbackFonts[fontFamily]) {\n      return fallbackFonts[fontFamily];\n    }\n    /* istanbul ignore next */\n\n    return fontMap[fontFamily] || false;\n  };\n  return new _transientRenderEngine.default({\n    customizeHTMLModels,\n    cssProcessorConfig: {\n      isFontSupported,\n      inlinePropertiesBlacklist: ignoredStyles,\n      inlinePropertiesWhitelist: allowedStyles,\n      rootFontSize: emSize\n    },\n    htmlParserOptions: {\n      decodeEntities: true,\n      ...htmlParserOptions\n    },\n    stylesConfig: {\n      baseStyle,\n      enableCSSInlineProcessing,\n      enableUserAgentStyles,\n      classesStyles,\n      idsStyles,\n      tagsStyles\n    },\n    ignoredDomTags,\n    ignoreDomNode,\n    domVisitors,\n    setMarkersForTNode,\n    selectDomRoot,\n    dangerouslyDisableHoisting,\n    dangerouslyDisableWhitespaceCollapsing\n  });\n}","map":{"version":3,"mappings":";;;;;;AACA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,kBAAT,CAA4BC,KAA5B,EAAwD;EACrE,MAAM;IACJC,aADI;IAEJ;IACAC,aAAa,GAAG,EAHZ;IAIJC,cAJI;IAKJC,aALI;IAMJC,WANI;IAOJC,iBAPI;IAQJC,SARI;IASJC,aATI;IAUJC,UAVI;IAWJC,SAXI;IAYJC,yBAZI;IAaJC,qBAbI;IAcJC,WAAW,GAAG,EAdV;IAeJC,aAAa,GAAG,EAfZ;IAgBJC,uBAAuB,GAAG,EAhBtB;IAiBJC,MAjBI;IAkBJC,kBAlBI;IAmBJC,aAnBI;IAoBJC,0BApBI;IAqBJC;EArBI,IAsBFpB,KAtBJ;EAuBA,MAAMqB,mBAAmB,GAAGC,MAAM,CAACC,IAAP,CAAYR,uBAAZ,EAAqCS,MAArC,GACvBC,aAAD,IAAuE;IACrE,OAAO;MAAE,GAAGA,aAAL;MAAoB,GAAGV;IAAvB,CAAP;EACD,CAHuB,GAIxBW,SAJJ;EAKA,MAAMC,OAAO,GAAG,EAAhB;EACAd,WAAW,CAACe,OAAZ,CAAqBC,IAAD,IAAU;IAC5BF,OAAO,CAACE,IAAD,CAAP,GAAgB,IAAhB;EACD,CAFD;EAGA,MAAMC,eAAe,GAAIC,UAAD,IAAwB;IAC9C,IAAIjB,aAAa,CAACiB,UAAD,CAAjB,EAA6D;MAC3D,OAAOjB,aAAa,CAACiB,UAAD,CAApB;IACD;IACD;;IACA,OAAOJ,OAAO,CAACI,UAAD,CAAP,IAAuB,KAA9B;EACD,CAND;EAOA,OAAO,IAAIC,8BAAJ,CAAkB;IACvBX,mBADuB;IAEvBY,kBAAkB,EAAE;MAClBH,eADkB;MAElBI,yBAAyB,EAAEhC,aAFT;MAGlBiC,yBAAyB,EAAElC,aAHT;MAIlBmC,YAAY,EAAEpB;IAJI,CAFG;IAQvBV,iBAAiB,EAAE;MACjB+B,cAAc,EAAE,IADC;MAEjB,GAAG/B;IAFc,CARI;IAYvBgC,YAAY,EAAE;MACZ/B,SADY;MAEZI,yBAFY;MAGZC,qBAHY;MAIZJ,aAJY;MAKZE,SALY;MAMZD;IANY,CAZS;IAoBvBN,cApBuB;IAqBvBC,aArBuB;IAsBvBC,WAtBuB;IAuBvBY,kBAvBuB;IAwBvBC,aAxBuB;IAyBvBC,0BAzBuB;IA0BvBC;EA1BuB,CAAlB,CAAP;AA4BD","names":["buildTREFromConfig","props","allowedStyles","ignoredStyles","ignoredDomTags","ignoreDomNode","domVisitors","htmlParserOptions","baseStyle","classesStyles","tagsStyles","idsStyles","enableCSSInlineProcessing","enableUserAgentStyles","systemFonts","fallbackFonts","customHTMLElementModels","emSize","setMarkersForTNode","selectDomRoot","dangerouslyDisableHoisting","dangerouslyDisableWhitespaceCollapsing","customizeHTMLModels","Object","keys","length","defaultModels","undefined","fontMap","forEach","font","isFontSupported","fontFamily","TRenderEngine","cssProcessorConfig","inlinePropertiesBlacklist","inlinePropertiesWhitelist","rootFontSize","decodeEntities","stylesConfig"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/react-native-render-html/lib/commonjs/helpers/buildTREFromConfig.ts"],"sourcesContent":["import { TRenderEngineConfig } from '../shared-types';\nimport TRenderEngine, {\n  HTMLModelRecord,\n  TagName\n} from '@native-html/transient-render-engine';\n\n/**\n * Build a {@link TRenderEngine} instance from a configuration object.\n *\n * @remarks This utility can be useful to test and debug the TRE layer of your\n * application.\n *\n * @param props - The configuration from which a TRE should be built.\n */\nexport default function buildTREFromConfig(props: TRenderEngineConfig) {\n  const {\n    allowedStyles,\n    // TODO fix upstream\n    ignoredStyles = [],\n    ignoredDomTags,\n    ignoreDomNode,\n    domVisitors,\n    htmlParserOptions,\n    baseStyle,\n    classesStyles,\n    tagsStyles,\n    idsStyles,\n    enableCSSInlineProcessing,\n    enableUserAgentStyles,\n    systemFonts = [],\n    fallbackFonts = {},\n    customHTMLElementModels = {},\n    emSize,\n    setMarkersForTNode,\n    selectDomRoot,\n    dangerouslyDisableHoisting,\n    dangerouslyDisableWhitespaceCollapsing\n  } = props;\n  const customizeHTMLModels = Object.keys(customHTMLElementModels).length\n    ? (defaultModels: HTMLModelRecord<TagName>): HTMLModelRecord<TagName> => {\n        return { ...defaultModels, ...customHTMLElementModels };\n      }\n    : undefined;\n  const fontMap = {} as Record<string, true>;\n  systemFonts.forEach((font) => {\n    fontMap[font] = true;\n  });\n  const isFontSupported = (fontFamily: string) => {\n    if (fallbackFonts[fontFamily as keyof typeof fallbackFonts]) {\n      return fallbackFonts[fontFamily as keyof typeof fallbackFonts];\n    }\n    /* istanbul ignore next */\n    return fontMap[fontFamily] || false;\n  };\n  return new TRenderEngine({\n    customizeHTMLModels,\n    cssProcessorConfig: {\n      isFontSupported,\n      inlinePropertiesBlacklist: ignoredStyles,\n      inlinePropertiesWhitelist: allowedStyles,\n      rootFontSize: emSize\n    },\n    htmlParserOptions: {\n      decodeEntities: true,\n      ...htmlParserOptions\n    },\n    stylesConfig: {\n      baseStyle,\n      enableCSSInlineProcessing,\n      enableUserAgentStyles,\n      classesStyles,\n      idsStyles,\n      tagsStyles\n    },\n    ignoredDomTags,\n    ignoreDomNode,\n    domVisitors,\n    setMarkersForTNode,\n    selectDomRoot,\n    dangerouslyDisableHoisting,\n    dangerouslyDisableWhitespaceCollapsing\n  });\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}