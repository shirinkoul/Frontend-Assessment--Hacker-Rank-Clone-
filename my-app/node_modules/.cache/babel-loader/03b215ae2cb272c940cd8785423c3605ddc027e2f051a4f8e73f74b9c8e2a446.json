{"ast":null,"code":"var _isArray = /*#__PURE__*/\nrequire(\"./_isArray\");\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\n\nfunction _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}\nmodule.exports = _checkForMethod;","map":{"version":3,"names":["_isArray","require","_checkForMethod","methodname","fn","length","arguments","obj","apply","Array","prototype","slice","call","module","exports"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/ramda/src/internal/_checkForMethod.js"],"sourcesContent":["var _isArray =\n/*#__PURE__*/\nrequire(\"./_isArray\");\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\n\n\nfunction _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n\n    if (length === 0) {\n      return fn();\n    }\n\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}\n\nmodule.exports = _checkForMethod;"],"mappings":"AAAA,IAAIA,QAAQ,GACZ;AACAC,OAAO,CAAC,YAAY,CAAC;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASC,eAAe,CAACC,UAAU,EAAEC,EAAE,EAAE;EACvC,OAAO,YAAY;IACjB,IAAIC,MAAM,GAAGC,SAAS,CAACD,MAAM;IAE7B,IAAIA,MAAM,KAAK,CAAC,EAAE;MAChB,OAAOD,EAAE,EAAE;IACb;IAEA,IAAIG,GAAG,GAAGD,SAAS,CAACD,MAAM,GAAG,CAAC,CAAC;IAC/B,OAAOL,QAAQ,CAACO,GAAG,CAAC,IAAI,OAAOA,GAAG,CAACJ,UAAU,CAAC,KAAK,UAAU,GAAGC,EAAE,CAACI,KAAK,CAAC,IAAI,EAAEF,SAAS,CAAC,GAAGC,GAAG,CAACJ,UAAU,CAAC,CAACK,KAAK,CAACD,GAAG,EAAEE,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACN,SAAS,EAAE,CAAC,EAAED,MAAM,GAAG,CAAC,CAAC,CAAC;EAC9K,CAAC;AACH;AAEAQ,MAAM,CAACC,OAAO,GAAGZ,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}