{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.TDocumentCtor = void 0;\nvar _HTMLElementModel = _interopRequireDefault(require(\"../model/HTMLElementModel\"));\nvar _domUtils = require(\"../dom/dom-utils\");\nvar _TBlockCtor = _interopRequireDefault(require(\"./TBlockCtor\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst defaultContextBase = Object.freeze({\n  baseHref: 'about:blank',\n  baseTarget: '_self',\n  charset: 'utf-8',\n  title: '',\n  lang: 'en',\n  dir: 'ltr',\n  links: [],\n  meta: []\n});\nfunction getDefaultDocumentContext() {\n  return Object.assign({}, defaultContextBase, {\n    links: [],\n    meta: []\n  });\n}\nfunction extractContextFromHead(head, lang, dir) {\n  const context = getDefaultDocumentContext();\n  if (lang) {\n    context.lang = lang;\n  }\n  if (dir) {\n    context.dir = 'rtl';\n  }\n  const domNode = head.domNode;\n  const children = domNode.children;\n  children.filter(_domUtils.isDomElement).forEach(child => {\n    if (child.tagName === 'meta') {\n      if (child.attribs.name) {\n        context.meta.push(child.attribs);\n      } else if (child.attribs.charset) {\n        context.charset = child.attribs.charset.toLowerCase();\n      }\n    } else if (child.tagName === 'link') {\n      context.links.push(child.attribs);\n    } else if (child.tagName === 'title') {\n      for (const titleChild of child.children.filter(_domUtils.isDomText)) {\n        context.title = titleChild.data.trim();\n        break;\n      }\n    } else if (child.tagName === 'base') {\n      context.baseHref = child.attribs.href || context.baseHref;\n      context.baseTarget = child.attribs.target || context.baseTarget;\n    }\n  });\n  return context;\n}\nconst htmlModel = _HTMLElementModel.default.fromNativeModel({\n  tagName: 'html',\n  category: 'grouping'\n});\nconst TDocumentCtor = function TDocument(init) {\n  this.initialize(init);\n};\nexports.TDocumentCtor = TDocumentCtor;\nTDocumentCtor.prototype = Object.create(_TBlockCtor.default.prototype);\nObject.defineProperty(TDocumentCtor.prototype, 'tagName', {\n  value: 'html',\n  writable: false\n});\nObject.defineProperty(TDocumentCtor.prototype, 'type', {\n  value: 'document',\n  writable: false\n});\nObject.defineProperty(TDocumentCtor.prototype, 'displayName', {\n  value: 'TDocument',\n  writable: false\n});\nObject.defineProperty(TDocumentCtor.prototype, 'elementModel', {\n  value: htmlModel,\n  writable: false\n});\nTDocumentCtor.prototype.parseChildren = function parseChildren() {\n  let head;\n  for (const child of this.children) {\n    if (child.tagName === 'head') {\n      head = child;\n      break;\n    }\n  }\n  this.context = Object.freeze(head ? extractContextFromHead(head, this.attributes.lang, this.attributes.dir) : {\n    ...getDefaultDocumentContext(),\n    lang: this.attributes.lang,\n    dir: this.attributes.dir\n  });\n};\nvar _default = TDocumentCtor;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["defaultContextBase","Object","freeze","baseHref","baseTarget","charset","title","lang","dir","links","meta","getDefaultDocumentContext","assign","extractContextFromHead","head","context","domNode","children","filter","isDomElement","forEach","child","tagName","attribs","name","push","toLowerCase","titleChild","isDomText","data","trim","href","target","htmlModel","HTMLElementModel","fromNativeModel","category","TDocumentCtor","TDocument","init","initialize","prototype","create","TBlockImpl","defineProperty","value","writable","parseChildren","attributes"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/@native-html/transient-render-engine/lib/commonjs/tree/TDocumentImpl.ts"],"sourcesContent":["import { GenericTNodeCtor, Mutable } from './TNodeCtor';\nimport HTMLElementModel from '../model/HTMLElementModel';\nimport { isDomElement, isDomText } from '../dom/dom-utils';\nimport { TEmptyImpl } from './TEmptyCtor';\nimport { TNodeInit, TNodeImpl, DocumentContext } from './tree-types';\nimport TBlockImpl from './TBlockCtor';\n\nexport type TDocumentInit = Omit<TNodeInit, 'elementModel'>;\n\nexport interface TDocumentImpl extends TNodeImpl<TNodeInit> {\n  readonly context: Readonly<DocumentContext>;\n  /**\n   * Iterate over children and extract meta-information into context field.\n   * Replace children with a single-element array containing the body.\n   */\n  parseChildren(): void;\n}\n\nconst defaultContextBase: DocumentContext = Object.freeze({\n  baseHref: 'about:blank',\n  baseTarget: '_self',\n  charset: 'utf-8',\n  title: '',\n  lang: 'en',\n  dir: 'ltr',\n  links: [],\n  meta: []\n});\n\nfunction getDefaultDocumentContext(): DocumentContext {\n  return Object.assign({}, defaultContextBase, { links: [], meta: [] });\n}\n\nfunction extractContextFromHead(head: TEmptyImpl, lang?: string, dir?: string) {\n  const context = getDefaultDocumentContext();\n  if (lang) {\n    context.lang = lang;\n  }\n  if (dir) {\n    context.dir = 'rtl';\n  }\n  const domNode = head.domNode;\n  const children = domNode.children;\n  children.filter(isDomElement).forEach((child) => {\n    if (child.tagName === 'meta') {\n      if (child.attribs.name) {\n        context.meta.push(child.attribs as any);\n      } else if (child.attribs.charset) {\n        context.charset = child.attribs.charset.toLowerCase();\n      }\n    } else if (child.tagName === 'link') {\n      context.links.push(child.attribs);\n    } else if (child.tagName === 'title') {\n      for (const titleChild of child.children.filter(isDomText)) {\n        context.title = titleChild.data.trim();\n        break;\n      }\n    } else if (child.tagName === 'base') {\n      context.baseHref = child.attribs.href || context.baseHref;\n      context.baseTarget = (child.attribs.target as any) || context.baseTarget;\n    }\n  });\n  return context;\n}\n\nconst htmlModel = HTMLElementModel.fromNativeModel({\n  tagName: 'html' as any,\n  category: 'grouping'\n});\n\nconst TDocumentCtor = function TDocument(\n  this: Mutable<TDocumentImpl>,\n  init: TDocumentInit\n) {\n  this.initialize(init as TNodeInit);\n} as Function as GenericTNodeCtor<TDocumentInit, TDocumentImpl>;\n\nTDocumentCtor.prototype = Object.create(TBlockImpl.prototype);\n\nObject.defineProperty(TDocumentCtor.prototype, 'tagName', {\n  value: 'html',\n  writable: false\n});\n\nObject.defineProperty(TDocumentCtor.prototype, 'type', {\n  value: 'document',\n  writable: false\n});\n\nObject.defineProperty(TDocumentCtor.prototype, 'displayName', {\n  value: 'TDocument',\n  writable: false\n});\n\nObject.defineProperty(TDocumentCtor.prototype, 'elementModel', {\n  value: htmlModel,\n  writable: false\n});\n\nTDocumentCtor.prototype.parseChildren = function parseChildren(\n  this: Mutable<TDocumentImpl>\n) {\n  let head: TEmptyImpl | undefined;\n  for (const child of this.children) {\n    if (child.tagName === 'head') {\n      head = child as unknown as TEmptyImpl;\n      break;\n    }\n  }\n  this.context = Object.freeze(\n    head\n      ? extractContextFromHead(\n          head,\n          this.attributes!.lang,\n          this.attributes!.dir\n        )\n      : {\n          ...getDefaultDocumentContext(),\n          lang: this.attributes!.lang,\n          dir: this.attributes!.dir as any\n        }\n  );\n};\n\nexport { TDocumentCtor };\n\nexport default TDocumentCtor;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}