{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar decode_codepoint_1 = __importDefault(require(\"entities/lib/decode_codepoint\"));\nvar decode_1 = require(\"entities/lib/decode\");\nfunction isWhitespace(c) {\n  return c === 32 /* Space */ || c === 10 /* NewLine */ || c === 9 /* Tab */ || c === 12 /* FormFeed */ || c === 13 /* CarriageReturn */;\n}\n\nfunction isEndOfTagSection(c) {\n  return c === 47 /* Slash */ || c === 62 /* Gt */ || isWhitespace(c);\n}\nfunction isNumber(c) {\n  return c >= 48 /* Zero */ && c <= 57 /* Nine */;\n}\n\nfunction isASCIIAlpha(c) {\n  return c >= 97 /* LowerA */ && c <= 122 /* LowerZ */ || c >= 65 /* UpperA */ && c <= 90 /* UpperZ */;\n}\n/**\n * Sequences used to match longer strings.\n *\n * We don't have `Script`, `Style`, or `Title` here. Instead, we re-use the *End\n * sequences with an increased offset.\n */\nvar Sequences = {\n  Cdata: new Uint16Array([0x43, 0x44, 0x41, 0x54, 0x41, 0x5b]),\n  CdataEnd: new Uint16Array([0x5d, 0x5d, 0x3e]),\n  CommentEnd: new Uint16Array([0x2d, 0x2d, 0x3e]),\n  ScriptEnd: new Uint16Array([0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74]),\n  StyleEnd: new Uint16Array([0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65]),\n  TitleEnd: new Uint16Array([0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65]) // `</title`\n};\n\nvar Tokenizer = /** @class */function () {\n  function Tokenizer(_a, cbs) {\n    var _b = _a.xmlMode,\n      xmlMode = _b === void 0 ? false : _b,\n      _c = _a.decodeEntities,\n      decodeEntities = _c === void 0 ? true : _c;\n    this.cbs = cbs;\n    /** The current state the tokenizer is in. */\n    this._state = 1 /* Text */;\n    /** The read buffer. */\n    this.buffer = \"\";\n    /** The beginning of the section that is currently being read. */\n    this.sectionStart = 0;\n    /** The index within the buffer that we are currently looking at. */\n    this._index = 0;\n    /**\n     * Data that has already been processed will be removed from the buffer occasionally.\n     * `_bufferOffset` keeps track of how many characters have been removed, to make sure position information is accurate.\n     */\n    this.bufferOffset = 0;\n    /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */\n    this.baseState = 1 /* Text */;\n    /** For special parsing behavior inside of script and style tags. */\n    this.isSpecial = false;\n    /** Indicates whether the tokenizer has been paused. */\n    this.running = true;\n    /** Indicates whether the tokenizer has finished running / `.end` has been called. */\n    this.ended = false;\n    this.sequenceIndex = 0;\n    this.trieIndex = 0;\n    this.trieCurrent = 0;\n    this.trieResult = null;\n    this.entityExcess = 0;\n    this.xmlMode = xmlMode;\n    this.decodeEntities = decodeEntities;\n    this.entityTrie = xmlMode ? decode_1.xmlDecodeTree : decode_1.htmlDecodeTree;\n  }\n  Tokenizer.prototype.reset = function () {\n    this._state = 1 /* Text */;\n    this.buffer = \"\";\n    this.sectionStart = 0;\n    this._index = 0;\n    this.bufferOffset = 0;\n    this.baseState = 1 /* Text */;\n    this.currentSequence = undefined;\n    this.running = true;\n    this.ended = false;\n  };\n  Tokenizer.prototype.write = function (chunk) {\n    if (this.ended) return this.cbs.onerror(Error(\".write() after done!\"));\n    this.buffer += chunk;\n    this.parse();\n  };\n  Tokenizer.prototype.end = function (chunk) {\n    if (this.ended) return this.cbs.onerror(Error(\".end() after done!\"));\n    if (chunk) this.write(chunk);\n    this.ended = true;\n    if (this.running) this.finish();\n  };\n  Tokenizer.prototype.pause = function () {\n    this.running = false;\n  };\n  Tokenizer.prototype.resume = function () {\n    this.running = true;\n    if (this._index < this.buffer.length) {\n      this.parse();\n    }\n    if (this.ended) {\n      this.finish();\n    }\n  };\n  /**\n   * The start of the current section.\n   */\n  Tokenizer.prototype.getAbsoluteSectionStart = function () {\n    return this.sectionStart + this.bufferOffset;\n  };\n  /**\n   * The current index within all of the written data.\n   */\n  Tokenizer.prototype.getAbsoluteIndex = function () {\n    return this.bufferOffset + this._index;\n  };\n  Tokenizer.prototype.stateText = function (c) {\n    if (c === 60 /* Lt */ || !this.decodeEntities && this.fastForwardTo(60 /* Lt */)) {\n      if (this._index > this.sectionStart) {\n        this.cbs.ontext(this.getSection());\n      }\n      this._state = 2 /* BeforeTagName */;\n      this.sectionStart = this._index;\n    } else if (this.decodeEntities && c === 38 /* Amp */) {\n      this._state = 25 /* BeforeEntity */;\n    }\n  };\n\n  Tokenizer.prototype.stateSpecialStartSequence = function (c) {\n    var isEnd = this.sequenceIndex === this.currentSequence.length;\n    var isMatch = isEnd ?\n    // If we are at the end of the sequence, make sure the tag name has ended\n    isEndOfTagSection(c) :\n    // Otherwise, do a case-insensitive comparison\n    (c | 0x20) === this.currentSequence[this.sequenceIndex];\n    if (!isMatch) {\n      this.isSpecial = false;\n    } else if (!isEnd) {\n      this.sequenceIndex++;\n      return;\n    }\n    this.sequenceIndex = 0;\n    this._state = 3 /* InTagName */;\n    this.stateInTagName(c);\n  };\n  /** Look for an end tag. For <title> tags, also decode entities. */\n  Tokenizer.prototype.stateInSpecialTag = function (c) {\n    if (this.sequenceIndex === this.currentSequence.length) {\n      if (c === 62 /* Gt */ || isWhitespace(c)) {\n        var endOfText = this._index - this.currentSequence.length;\n        if (this.sectionStart < endOfText) {\n          // Spoof the index so that reported locations match up.\n          var actualIndex = this._index;\n          this._index = endOfText;\n          this.cbs.ontext(this.getSection());\n          this._index = actualIndex;\n        }\n        this.isSpecial = false;\n        this.sectionStart = endOfText + 2; // Skip over the `</`\n        this.stateInClosingTagName(c);\n        return; // We are done; skip the rest of the function.\n      }\n\n      this.sequenceIndex = 0;\n    }\n    if ((c | 0x20) === this.currentSequence[this.sequenceIndex]) {\n      this.sequenceIndex += 1;\n    } else if (this.sequenceIndex === 0) {\n      if (this.currentSequence === Sequences.TitleEnd) {\n        // We have to parse entities in <title> tags.\n        if (this.decodeEntities && c === 38 /* Amp */) {\n          this._state = 25 /* BeforeEntity */;\n        }\n      } else if (this.fastForwardTo(60 /* Lt */)) {\n        // Outside of <title> tags, we can fast-forward.\n        this.sequenceIndex = 1;\n      }\n    } else {\n      // If we see a `<`, set the sequence index to 1; useful for eg. `<</script>`.\n      this.sequenceIndex = Number(c === 60 /* Lt */);\n    }\n  };\n\n  Tokenizer.prototype.stateCDATASequence = function (c) {\n    if (c === Sequences.Cdata[this.sequenceIndex]) {\n      if (++this.sequenceIndex === Sequences.Cdata.length) {\n        this._state = 21 /* InCommentLike */;\n        this.currentSequence = Sequences.CdataEnd;\n        this.sequenceIndex = 0;\n        this.sectionStart = this._index + 1;\n      }\n    } else {\n      this.sequenceIndex = 0;\n      this._state = 16 /* InDeclaration */;\n      this.stateInDeclaration(c); // Reconsume the character\n    }\n  };\n  /**\n   * When we wait for one specific character, we can speed things up\n   * by skipping through the buffer until we find it.\n   *\n   * @returns Whether the character was found.\n   */\n  Tokenizer.prototype.fastForwardTo = function (c) {\n    while (++this._index < this.buffer.length) {\n      if (this.buffer.charCodeAt(this._index) === c) {\n        return true;\n      }\n    }\n    /*\n     * We increment the index at the end of the `parse` loop,\n     * so set it to `buffer.length - 1` here.\n     *\n     * TODO: Refactor `parse` to increment index before calling states.\n     */\n    this._index = this.buffer.length - 1;\n    return false;\n  };\n  /**\n   * Comments and CDATA end with `-->` and `]]>`.\n   *\n   * Their common qualities are:\n   * - Their end sequences have a distinct character they start with.\n   * - That character is then repeated, so we have to check multiple repeats.\n   * - All characters but the start character of the sequence can be skipped.\n   */\n  Tokenizer.prototype.stateInCommentLike = function (c) {\n    if (c === this.currentSequence[this.sequenceIndex]) {\n      if (++this.sequenceIndex === this.currentSequence.length) {\n        // Remove 2 trailing chars\n        var section = this.buffer.slice(this.sectionStart, this._index - 2);\n        if (this.currentSequence === Sequences.CdataEnd) {\n          this.cbs.oncdata(section);\n        } else {\n          this.cbs.oncomment(section);\n        }\n        this.sequenceIndex = 0;\n        this.sectionStart = this._index + 1;\n        this._state = 1 /* Text */;\n      }\n    } else if (this.sequenceIndex === 0) {\n      // Fast-forward to the first character of the sequence\n      if (this.fastForwardTo(this.currentSequence[0])) {\n        this.sequenceIndex = 1;\n      }\n    } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {\n      // Allow long sequences, eg. --->, ]]]>\n      this.sequenceIndex = 0;\n    }\n  };\n  /**\n   * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.\n   *\n   * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).\n   * We allow anything that wouldn't end the tag.\n   */\n  Tokenizer.prototype.isTagStartChar = function (c) {\n    return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);\n  };\n  Tokenizer.prototype.startSpecial = function (sequence, offset) {\n    this.isSpecial = true;\n    this.currentSequence = sequence;\n    this.sequenceIndex = offset;\n    this._state = 23 /* SpecialStartSequence */;\n  };\n\n  Tokenizer.prototype.stateBeforeTagName = function (c) {\n    if (c === 33 /* ExclamationMark */) {\n      this._state = 15 /* BeforeDeclaration */;\n      this.sectionStart = this._index + 1;\n    } else if (c === 63 /* Questionmark */) {\n      this._state = 17 /* InProcessingInstruction */;\n      this.sectionStart = this._index + 1;\n    } else if (this.isTagStartChar(c)) {\n      var lower = c | 0x20;\n      this.sectionStart = this._index;\n      if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {\n        this.startSpecial(Sequences.TitleEnd, 3);\n      } else {\n        this._state = !this.xmlMode && lower === Sequences.ScriptEnd[2] ? 22 /* BeforeSpecialS */ : 3 /* InTagName */;\n      }\n    } else if (c === 47 /* Slash */) {\n      this._state = 5 /* BeforeClosingTagName */;\n    } else {\n      this._state = 1 /* Text */;\n      this.stateText(c);\n    }\n  };\n  Tokenizer.prototype.stateInTagName = function (c) {\n    if (isEndOfTagSection(c)) {\n      this.cbs.onopentagname(this.getSection());\n      this.sectionStart = -1;\n      this._state = 8 /* BeforeAttributeName */;\n      this.stateBeforeAttributeName(c);\n    }\n  };\n  Tokenizer.prototype.stateBeforeClosingTagName = function (c) {\n    if (isWhitespace(c)) {\n      // Ignore\n    } else if (c === 62 /* Gt */) {\n      this._state = 1 /* Text */;\n    } else {\n      this._state = this.isTagStartChar(c) ? 6 /* InClosingTagName */ : 20 /* InSpecialComment */;\n      this.sectionStart = this._index;\n    }\n  };\n  Tokenizer.prototype.stateInClosingTagName = function (c) {\n    if (c === 62 /* Gt */ || isWhitespace(c)) {\n      this.cbs.onclosetag(this.getSection());\n      this.sectionStart = -1;\n      this._state = 7 /* AfterClosingTagName */;\n      this.stateAfterClosingTagName(c);\n    }\n  };\n  Tokenizer.prototype.stateAfterClosingTagName = function (c) {\n    // Skip everything until \">\"\n    if (c === 62 /* Gt */ || this.fastForwardTo(62 /* Gt */)) {\n      this._state = 1 /* Text */;\n      this.sectionStart = this._index + 1;\n    }\n  };\n  Tokenizer.prototype.stateBeforeAttributeName = function (c) {\n    if (c === 62 /* Gt */) {\n      this.cbs.onopentagend();\n      if (this.isSpecial) {\n        this._state = 24 /* InSpecialTag */;\n        this.sequenceIndex = 0;\n      } else {\n        this._state = 1 /* Text */;\n      }\n\n      this.baseState = this._state;\n      this.sectionStart = this._index + 1;\n    } else if (c === 47 /* Slash */) {\n      this._state = 4 /* InSelfClosingTag */;\n    } else if (!isWhitespace(c)) {\n      this._state = 9 /* InAttributeName */;\n      this.sectionStart = this._index;\n    }\n  };\n  Tokenizer.prototype.stateInSelfClosingTag = function (c) {\n    if (c === 62 /* Gt */) {\n      this.cbs.onselfclosingtag();\n      this._state = 1 /* Text */;\n      this.baseState = 1 /* Text */;\n      this.sectionStart = this._index + 1;\n      this.isSpecial = false; // Reset special state, in case of self-closing special tags\n    } else if (!isWhitespace(c)) {\n      this._state = 8 /* BeforeAttributeName */;\n      this.stateBeforeAttributeName(c);\n    }\n  };\n  Tokenizer.prototype.stateInAttributeName = function (c) {\n    if (c === 61 /* Eq */ || isEndOfTagSection(c)) {\n      this.cbs.onattribname(this.getSection());\n      this.sectionStart = -1;\n      this._state = 10 /* AfterAttributeName */;\n      this.stateAfterAttributeName(c);\n    }\n  };\n  Tokenizer.prototype.stateAfterAttributeName = function (c) {\n    if (c === 61 /* Eq */) {\n      this._state = 11 /* BeforeAttributeValue */;\n    } else if (c === 47 /* Slash */ || c === 62 /* Gt */) {\n      this.cbs.onattribend(undefined);\n      this._state = 8 /* BeforeAttributeName */;\n      this.stateBeforeAttributeName(c);\n    } else if (!isWhitespace(c)) {\n      this.cbs.onattribend(undefined);\n      this._state = 9 /* InAttributeName */;\n      this.sectionStart = this._index;\n    }\n  };\n  Tokenizer.prototype.stateBeforeAttributeValue = function (c) {\n    if (c === 34 /* DoubleQuote */) {\n      this._state = 12 /* InAttributeValueDq */;\n      this.sectionStart = this._index + 1;\n    } else if (c === 39 /* SingleQuote */) {\n      this._state = 13 /* InAttributeValueSq */;\n      this.sectionStart = this._index + 1;\n    } else if (!isWhitespace(c)) {\n      this.sectionStart = this._index;\n      this._state = 14 /* InAttributeValueNq */;\n      this.stateInAttributeValueNoQuotes(c); // Reconsume token\n    }\n  };\n\n  Tokenizer.prototype.handleInAttributeValue = function (c, quote) {\n    if (c === quote || !this.decodeEntities && this.fastForwardTo(quote)) {\n      this.cbs.onattribdata(this.getSection());\n      this.sectionStart = -1;\n      this.cbs.onattribend(String.fromCharCode(quote));\n      this._state = 8 /* BeforeAttributeName */;\n    } else if (this.decodeEntities && c === 38 /* Amp */) {\n      this.baseState = this._state;\n      this._state = 25 /* BeforeEntity */;\n    }\n  };\n\n  Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function (c) {\n    this.handleInAttributeValue(c, 34 /* DoubleQuote */);\n  };\n\n  Tokenizer.prototype.stateInAttributeValueSingleQuotes = function (c) {\n    this.handleInAttributeValue(c, 39 /* SingleQuote */);\n  };\n\n  Tokenizer.prototype.stateInAttributeValueNoQuotes = function (c) {\n    if (isWhitespace(c) || c === 62 /* Gt */) {\n      this.cbs.onattribdata(this.getSection());\n      this.sectionStart = -1;\n      this.cbs.onattribend(null);\n      this._state = 8 /* BeforeAttributeName */;\n      this.stateBeforeAttributeName(c);\n    } else if (this.decodeEntities && c === 38 /* Amp */) {\n      this.baseState = this._state;\n      this._state = 25 /* BeforeEntity */;\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeDeclaration = function (c) {\n    if (c === 91 /* OpeningSquareBracket */) {\n      this._state = 19 /* CDATASequence */;\n      this.sequenceIndex = 0;\n    } else {\n      this._state = c === 45 /* Dash */ ? 18 /* BeforeComment */ : 16 /* InDeclaration */;\n    }\n  };\n\n  Tokenizer.prototype.stateInDeclaration = function (c) {\n    if (c === 62 /* Gt */ || this.fastForwardTo(62 /* Gt */)) {\n      this.cbs.ondeclaration(this.getSection());\n      this._state = 1 /* Text */;\n      this.sectionStart = this._index + 1;\n    }\n  };\n  Tokenizer.prototype.stateInProcessingInstruction = function (c) {\n    if (c === 62 /* Gt */ || this.fastForwardTo(62 /* Gt */)) {\n      this.cbs.onprocessinginstruction(this.getSection());\n      this._state = 1 /* Text */;\n      this.sectionStart = this._index + 1;\n    }\n  };\n  Tokenizer.prototype.stateBeforeComment = function (c) {\n    if (c === 45 /* Dash */) {\n      this._state = 21 /* InCommentLike */;\n      this.currentSequence = Sequences.CommentEnd;\n      // Allow short comments (eg. <!-->)\n      this.sequenceIndex = 2;\n      this.sectionStart = this._index + 1;\n    } else {\n      this._state = 16 /* InDeclaration */;\n    }\n  };\n\n  Tokenizer.prototype.stateInSpecialComment = function (c) {\n    if (c === 62 /* Gt */ || this.fastForwardTo(62 /* Gt */)) {\n      this.cbs.oncomment(this.getSection());\n      this._state = 1 /* Text */;\n      this.sectionStart = this._index + 1;\n    }\n  };\n  Tokenizer.prototype.stateBeforeSpecialS = function (c) {\n    var lower = c | 0x20;\n    if (lower === Sequences.ScriptEnd[3]) {\n      this.startSpecial(Sequences.ScriptEnd, 4);\n    } else if (lower === Sequences.StyleEnd[3]) {\n      this.startSpecial(Sequences.StyleEnd, 4);\n    } else {\n      this._state = 3 /* InTagName */;\n      this.stateInTagName(c); // Consume the token again\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeEntity = function (c) {\n    // Start excess with 1 to include the '&'\n    this.entityExcess = 1;\n    if (c === 35 /* Num */) {\n      this._state = 26 /* BeforeNumericEntity */;\n    } else if (c === 38 /* Amp */) {\n      // We have two `&` characters in a row. Stay in the current state.\n    } else {\n      this.trieIndex = 0;\n      this.trieCurrent = this.entityTrie[0];\n      this.trieResult = null;\n      this._state = 27 /* InNamedEntity */;\n      this.stateInNamedEntity(c);\n    }\n  };\n  Tokenizer.prototype.stateInNamedEntity = function (c) {\n    this.entityExcess += 1;\n    this.trieIndex = (0, decode_1.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);\n    if (this.trieIndex < 0) {\n      this.emitNamedEntity();\n      this._index--;\n      return;\n    }\n    this.trieCurrent = this.entityTrie[this.trieIndex];\n    // If the branch is a value, store it and continue\n    if (this.trieCurrent & decode_1.BinTrieFlags.HAS_VALUE) {\n      // If we have a legacy entity while parsing strictly, just skip the number of bytes\n      if (!this.allowLegacyEntity() && c !== 59 /* Semi */) {\n        // No need to consider multi-byte values, as the legacy entity is always a single byte\n        this.trieIndex += 1;\n      } else {\n        // Add 1 as we have already incremented the excess\n        var entityStart = this._index - this.entityExcess + 1;\n        if (entityStart > this.sectionStart) {\n          this.emitPartial(this.buffer.substring(this.sectionStart, entityStart));\n        }\n        // If this is a surrogate pair, combine the higher bits from the node with the next byte\n        this.trieResult = this.trieCurrent & decode_1.BinTrieFlags.MULTI_BYTE ? String.fromCharCode(this.entityTrie[++this.trieIndex], this.entityTrie[++this.trieIndex]) : String.fromCharCode(this.entityTrie[++this.trieIndex]);\n        this.entityExcess = 0;\n        this.sectionStart = this._index + 1;\n      }\n    }\n  };\n  Tokenizer.prototype.emitNamedEntity = function () {\n    if (this.trieResult) {\n      this.emitPartial(this.trieResult);\n    }\n    this._state = this.baseState;\n  };\n  Tokenizer.prototype.stateBeforeNumericEntity = function (c) {\n    if ((c | 0x20) === 120 /* LowerX */) {\n      this.entityExcess++;\n      this._state = 29 /* InHexEntity */;\n    } else {\n      this._state = 28 /* InNumericEntity */;\n      this.stateInNumericEntity(c);\n    }\n  };\n  Tokenizer.prototype.decodeNumericEntity = function (base, strict) {\n    var entityStart = this._index - this.entityExcess - 1;\n    var numberStart = entityStart + 2 + (base >> 4);\n    if (numberStart !== this._index) {\n      // Emit leading data if any\n      if (entityStart > this.sectionStart) {\n        this.emitPartial(this.buffer.substring(this.sectionStart, entityStart));\n      }\n      // Parse entity\n      var entity = this.buffer.substring(numberStart, this._index);\n      var parsed = parseInt(entity, base);\n      this.emitPartial((0, decode_codepoint_1.default)(parsed));\n      this.sectionStart = this._index + Number(strict);\n    }\n    this._state = this.baseState;\n  };\n  Tokenizer.prototype.stateInNumericEntity = function (c) {\n    if (c === 59 /* Semi */) {\n      this.decodeNumericEntity(10, true);\n    } else if (!isNumber(c)) {\n      if (this.allowLegacyEntity()) {\n        this.decodeNumericEntity(10, false);\n      } else {\n        this._state = this.baseState;\n      }\n      this._index--;\n    } else {\n      this.entityExcess++;\n    }\n  };\n  Tokenizer.prototype.stateInHexEntity = function (c) {\n    if (c === 59 /* Semi */) {\n      this.decodeNumericEntity(16, true);\n    } else if ((c < 97 /* LowerA */ || c > 102 /* LowerF */) && (c < 65 /* UpperA */ || c > 70 /* UpperF */) && !isNumber(c)) {\n      if (this.allowLegacyEntity()) {\n        this.decodeNumericEntity(16, false);\n      } else {\n        this._state = this.baseState;\n      }\n      this._index--;\n    } else {\n      this.entityExcess++;\n    }\n  };\n  Tokenizer.prototype.allowLegacyEntity = function () {\n    return !this.xmlMode && (this.baseState === 1 /* Text */ || this.baseState === 24 /* InSpecialTag */);\n  };\n  /**\n   * Remove data that has already been consumed from the buffer.\n   */\n  Tokenizer.prototype.cleanup = function () {\n    // If we are inside of text, emit what we already have.\n    if (this.running && this.sectionStart !== this._index && (this._state === 1 /* Text */ || this._state === 24 /* InSpecialTag */ && this.sequenceIndex === 0)) {\n      // TODO: We could emit attribute data here as well.\n      this.cbs.ontext(this.buffer.substr(this.sectionStart));\n      this.sectionStart = this._index;\n    }\n    var start = this.sectionStart < 0 ? this._index : this.sectionStart;\n    this.buffer = start === this.buffer.length ? \"\" : this.buffer.substr(start);\n    this._index -= start;\n    this.bufferOffset += start;\n    if (this.sectionStart > 0) {\n      this.sectionStart = 0;\n    }\n  };\n  Tokenizer.prototype.shouldContinue = function () {\n    return this._index < this.buffer.length && this.running;\n  };\n  /**\n   * Iterates through the buffer, calling the function corresponding to the current state.\n   *\n   * States that are more likely to be hit are higher up, as a performance improvement.\n   */\n  Tokenizer.prototype.parse = function () {\n    while (this.shouldContinue()) {\n      var c = this.buffer.charCodeAt(this._index);\n      if (this._state === 1 /* Text */) {\n        this.stateText(c);\n      } else if (this._state === 23 /* SpecialStartSequence */) {\n        this.stateSpecialStartSequence(c);\n      } else if (this._state === 24 /* InSpecialTag */) {\n        this.stateInSpecialTag(c);\n      } else if (this._state === 19 /* CDATASequence */) {\n        this.stateCDATASequence(c);\n      } else if (this._state === 12 /* InAttributeValueDq */) {\n        this.stateInAttributeValueDoubleQuotes(c);\n      } else if (this._state === 9 /* InAttributeName */) {\n        this.stateInAttributeName(c);\n      } else if (this._state === 21 /* InCommentLike */) {\n        this.stateInCommentLike(c);\n      } else if (this._state === 20 /* InSpecialComment */) {\n        this.stateInSpecialComment(c);\n      } else if (this._state === 8 /* BeforeAttributeName */) {\n        this.stateBeforeAttributeName(c);\n      } else if (this._state === 3 /* InTagName */) {\n        this.stateInTagName(c);\n      } else if (this._state === 6 /* InClosingTagName */) {\n        this.stateInClosingTagName(c);\n      } else if (this._state === 2 /* BeforeTagName */) {\n        this.stateBeforeTagName(c);\n      } else if (this._state === 10 /* AfterAttributeName */) {\n        this.stateAfterAttributeName(c);\n      } else if (this._state === 13 /* InAttributeValueSq */) {\n        this.stateInAttributeValueSingleQuotes(c);\n      } else if (this._state === 11 /* BeforeAttributeValue */) {\n        this.stateBeforeAttributeValue(c);\n      } else if (this._state === 5 /* BeforeClosingTagName */) {\n        this.stateBeforeClosingTagName(c);\n      } else if (this._state === 7 /* AfterClosingTagName */) {\n        this.stateAfterClosingTagName(c);\n      } else if (this._state === 22 /* BeforeSpecialS */) {\n        this.stateBeforeSpecialS(c);\n      } else if (this._state === 14 /* InAttributeValueNq */) {\n        this.stateInAttributeValueNoQuotes(c);\n      } else if (this._state === 4 /* InSelfClosingTag */) {\n        this.stateInSelfClosingTag(c);\n      } else if (this._state === 16 /* InDeclaration */) {\n        this.stateInDeclaration(c);\n      } else if (this._state === 15 /* BeforeDeclaration */) {\n        this.stateBeforeDeclaration(c);\n      } else if (this._state === 18 /* BeforeComment */) {\n        this.stateBeforeComment(c);\n      } else if (this._state === 17 /* InProcessingInstruction */) {\n        this.stateInProcessingInstruction(c);\n      } else if (this._state === 27 /* InNamedEntity */) {\n        this.stateInNamedEntity(c);\n      } else if (this._state === 25 /* BeforeEntity */) {\n        this.stateBeforeEntity(c);\n      } else if (this._state === 29 /* InHexEntity */) {\n        this.stateInHexEntity(c);\n      } else if (this._state === 28 /* InNumericEntity */) {\n        this.stateInNumericEntity(c);\n      } else {\n        // `this._state === State.BeforeNumericEntity`\n        this.stateBeforeNumericEntity(c);\n      }\n      this._index++;\n    }\n    this.cleanup();\n  };\n  Tokenizer.prototype.finish = function () {\n    if (this._state === 27 /* InNamedEntity */) {\n      this.emitNamedEntity();\n    }\n    // If there is remaining data, emit it in a reasonable way\n    if (this.sectionStart < this._index) {\n      this.handleTrailingData();\n    }\n    this.cbs.onend();\n  };\n  /** Handle any trailing data. */\n  Tokenizer.prototype.handleTrailingData = function () {\n    var data = this.buffer.substr(this.sectionStart);\n    if (this._state === 21 /* InCommentLike */) {\n      if (this.currentSequence === Sequences.CdataEnd) {\n        this.cbs.oncdata(data);\n      } else {\n        this.cbs.oncomment(data);\n      }\n    } else if (this._state === 28 /* InNumericEntity */ && this.allowLegacyEntity()) {\n      this.decodeNumericEntity(10, false);\n      // All trailing data will have been consumed\n    } else if (this._state === 29 /* InHexEntity */ && this.allowLegacyEntity()) {\n      this.decodeNumericEntity(16, false);\n      // All trailing data will have been consumed\n    } else if (this._state === 3 /* InTagName */ || this._state === 8 /* BeforeAttributeName */ || this._state === 11 /* BeforeAttributeValue */ || this._state === 10 /* AfterAttributeName */ || this._state === 9 /* InAttributeName */ || this._state === 13 /* InAttributeValueSq */ || this._state === 12 /* InAttributeValueDq */ || this._state === 14 /* InAttributeValueNq */ || this._state === 6 /* InClosingTagName */) {\n      /*\n       * If we are currently in an opening or closing tag, us not calling the\n       * respective callback signals that the tag should be ignored.\n       */\n    } else {\n      this.cbs.ontext(data);\n    }\n  };\n  Tokenizer.prototype.getSection = function () {\n    return this.buffer.substring(this.sectionStart, this._index);\n  };\n  Tokenizer.prototype.emitPartial = function (value) {\n    if (this.baseState !== 1 /* Text */ && this.baseState !== 24 /* InSpecialTag */) {\n      this.cbs.onattribdata(value);\n    } else {\n      this.cbs.ontext(value);\n    }\n  };\n  return Tokenizer;\n}();\nexports.default = Tokenizer;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","decode_codepoint_1","require","decode_1","isWhitespace","c","isEndOfTagSection","isNumber","isASCIIAlpha","Sequences","Cdata","Uint16Array","CdataEnd","CommentEnd","ScriptEnd","StyleEnd","TitleEnd","Tokenizer","_a","cbs","_b","xmlMode","_c","decodeEntities","_state","buffer","sectionStart","_index","bufferOffset","baseState","isSpecial","running","ended","sequenceIndex","trieIndex","trieCurrent","trieResult","entityExcess","entityTrie","xmlDecodeTree","htmlDecodeTree","prototype","reset","currentSequence","undefined","write","chunk","onerror","Error","parse","end","finish","pause","resume","length","getAbsoluteSectionStart","getAbsoluteIndex","stateText","fastForwardTo","ontext","getSection","stateSpecialStartSequence","isEnd","isMatch","stateInTagName","stateInSpecialTag","endOfText","actualIndex","stateInClosingTagName","Number","stateCDATASequence","stateInDeclaration","charCodeAt","stateInCommentLike","section","slice","oncdata","oncomment","isTagStartChar","startSpecial","sequence","offset","stateBeforeTagName","lower","onopentagname","stateBeforeAttributeName","stateBeforeClosingTagName","onclosetag","stateAfterClosingTagName","onopentagend","stateInSelfClosingTag","onselfclosingtag","stateInAttributeName","onattribname","stateAfterAttributeName","onattribend","stateBeforeAttributeValue","stateInAttributeValueNoQuotes","handleInAttributeValue","quote","onattribdata","String","fromCharCode","stateInAttributeValueDoubleQuotes","stateInAttributeValueSingleQuotes","stateBeforeDeclaration","ondeclaration","stateInProcessingInstruction","onprocessinginstruction","stateBeforeComment","stateInSpecialComment","stateBeforeSpecialS","stateBeforeEntity","stateInNamedEntity","determineBranch","emitNamedEntity","BinTrieFlags","HAS_VALUE","allowLegacyEntity","entityStart","emitPartial","substring","MULTI_BYTE","stateBeforeNumericEntity","stateInNumericEntity","decodeNumericEntity","base","strict","numberStart","entity","parsed","parseInt","default","stateInHexEntity","cleanup","substr","start","shouldContinue","handleTrailingData","onend","data"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/htmlparser2/lib/Tokenizer.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar decode_codepoint_1 = __importDefault(require(\"entities/lib/decode_codepoint\"));\nvar decode_1 = require(\"entities/lib/decode\");\nfunction isWhitespace(c) {\n    return (c === 32 /* Space */ ||\n        c === 10 /* NewLine */ ||\n        c === 9 /* Tab */ ||\n        c === 12 /* FormFeed */ ||\n        c === 13 /* CarriageReturn */);\n}\nfunction isEndOfTagSection(c) {\n    return c === 47 /* Slash */ || c === 62 /* Gt */ || isWhitespace(c);\n}\nfunction isNumber(c) {\n    return c >= 48 /* Zero */ && c <= 57 /* Nine */;\n}\nfunction isASCIIAlpha(c) {\n    return ((c >= 97 /* LowerA */ && c <= 122 /* LowerZ */) ||\n        (c >= 65 /* UpperA */ && c <= 90 /* UpperZ */));\n}\n/**\n * Sequences used to match longer strings.\n *\n * We don't have `Script`, `Style`, or `Title` here. Instead, we re-use the *End\n * sequences with an increased offset.\n */\nvar Sequences = {\n    Cdata: new Uint16Array([0x43, 0x44, 0x41, 0x54, 0x41, 0x5b]),\n    CdataEnd: new Uint16Array([0x5d, 0x5d, 0x3e]),\n    CommentEnd: new Uint16Array([0x2d, 0x2d, 0x3e]),\n    ScriptEnd: new Uint16Array([\n        0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n    ]),\n    StyleEnd: new Uint16Array([0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65]),\n    TitleEnd: new Uint16Array([0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65]), // `</title`\n};\nvar Tokenizer = /** @class */ (function () {\n    function Tokenizer(_a, cbs) {\n        var _b = _a.xmlMode, xmlMode = _b === void 0 ? false : _b, _c = _a.decodeEntities, decodeEntities = _c === void 0 ? true : _c;\n        this.cbs = cbs;\n        /** The current state the tokenizer is in. */\n        this._state = 1 /* Text */;\n        /** The read buffer. */\n        this.buffer = \"\";\n        /** The beginning of the section that is currently being read. */\n        this.sectionStart = 0;\n        /** The index within the buffer that we are currently looking at. */\n        this._index = 0;\n        /**\n         * Data that has already been processed will be removed from the buffer occasionally.\n         * `_bufferOffset` keeps track of how many characters have been removed, to make sure position information is accurate.\n         */\n        this.bufferOffset = 0;\n        /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */\n        this.baseState = 1 /* Text */;\n        /** For special parsing behavior inside of script and style tags. */\n        this.isSpecial = false;\n        /** Indicates whether the tokenizer has been paused. */\n        this.running = true;\n        /** Indicates whether the tokenizer has finished running / `.end` has been called. */\n        this.ended = false;\n        this.sequenceIndex = 0;\n        this.trieIndex = 0;\n        this.trieCurrent = 0;\n        this.trieResult = null;\n        this.entityExcess = 0;\n        this.xmlMode = xmlMode;\n        this.decodeEntities = decodeEntities;\n        this.entityTrie = xmlMode ? decode_1.xmlDecodeTree : decode_1.htmlDecodeTree;\n    }\n    Tokenizer.prototype.reset = function () {\n        this._state = 1 /* Text */;\n        this.buffer = \"\";\n        this.sectionStart = 0;\n        this._index = 0;\n        this.bufferOffset = 0;\n        this.baseState = 1 /* Text */;\n        this.currentSequence = undefined;\n        this.running = true;\n        this.ended = false;\n    };\n    Tokenizer.prototype.write = function (chunk) {\n        if (this.ended)\n            return this.cbs.onerror(Error(\".write() after done!\"));\n        this.buffer += chunk;\n        this.parse();\n    };\n    Tokenizer.prototype.end = function (chunk) {\n        if (this.ended)\n            return this.cbs.onerror(Error(\".end() after done!\"));\n        if (chunk)\n            this.write(chunk);\n        this.ended = true;\n        if (this.running)\n            this.finish();\n    };\n    Tokenizer.prototype.pause = function () {\n        this.running = false;\n    };\n    Tokenizer.prototype.resume = function () {\n        this.running = true;\n        if (this._index < this.buffer.length) {\n            this.parse();\n        }\n        if (this.ended) {\n            this.finish();\n        }\n    };\n    /**\n     * The start of the current section.\n     */\n    Tokenizer.prototype.getAbsoluteSectionStart = function () {\n        return this.sectionStart + this.bufferOffset;\n    };\n    /**\n     * The current index within all of the written data.\n     */\n    Tokenizer.prototype.getAbsoluteIndex = function () {\n        return this.bufferOffset + this._index;\n    };\n    Tokenizer.prototype.stateText = function (c) {\n        if (c === 60 /* Lt */ ||\n            (!this.decodeEntities && this.fastForwardTo(60 /* Lt */))) {\n            if (this._index > this.sectionStart) {\n                this.cbs.ontext(this.getSection());\n            }\n            this._state = 2 /* BeforeTagName */;\n            this.sectionStart = this._index;\n        }\n        else if (this.decodeEntities && c === 38 /* Amp */) {\n            this._state = 25 /* BeforeEntity */;\n        }\n    };\n    Tokenizer.prototype.stateSpecialStartSequence = function (c) {\n        var isEnd = this.sequenceIndex === this.currentSequence.length;\n        var isMatch = isEnd\n            ? // If we are at the end of the sequence, make sure the tag name has ended\n                isEndOfTagSection(c)\n            : // Otherwise, do a case-insensitive comparison\n                (c | 0x20) === this.currentSequence[this.sequenceIndex];\n        if (!isMatch) {\n            this.isSpecial = false;\n        }\n        else if (!isEnd) {\n            this.sequenceIndex++;\n            return;\n        }\n        this.sequenceIndex = 0;\n        this._state = 3 /* InTagName */;\n        this.stateInTagName(c);\n    };\n    /** Look for an end tag. For <title> tags, also decode entities. */\n    Tokenizer.prototype.stateInSpecialTag = function (c) {\n        if (this.sequenceIndex === this.currentSequence.length) {\n            if (c === 62 /* Gt */ || isWhitespace(c)) {\n                var endOfText = this._index - this.currentSequence.length;\n                if (this.sectionStart < endOfText) {\n                    // Spoof the index so that reported locations match up.\n                    var actualIndex = this._index;\n                    this._index = endOfText;\n                    this.cbs.ontext(this.getSection());\n                    this._index = actualIndex;\n                }\n                this.isSpecial = false;\n                this.sectionStart = endOfText + 2; // Skip over the `</`\n                this.stateInClosingTagName(c);\n                return; // We are done; skip the rest of the function.\n            }\n            this.sequenceIndex = 0;\n        }\n        if ((c | 0x20) === this.currentSequence[this.sequenceIndex]) {\n            this.sequenceIndex += 1;\n        }\n        else if (this.sequenceIndex === 0) {\n            if (this.currentSequence === Sequences.TitleEnd) {\n                // We have to parse entities in <title> tags.\n                if (this.decodeEntities && c === 38 /* Amp */) {\n                    this._state = 25 /* BeforeEntity */;\n                }\n            }\n            else if (this.fastForwardTo(60 /* Lt */)) {\n                // Outside of <title> tags, we can fast-forward.\n                this.sequenceIndex = 1;\n            }\n        }\n        else {\n            // If we see a `<`, set the sequence index to 1; useful for eg. `<</script>`.\n            this.sequenceIndex = Number(c === 60 /* Lt */);\n        }\n    };\n    Tokenizer.prototype.stateCDATASequence = function (c) {\n        if (c === Sequences.Cdata[this.sequenceIndex]) {\n            if (++this.sequenceIndex === Sequences.Cdata.length) {\n                this._state = 21 /* InCommentLike */;\n                this.currentSequence = Sequences.CdataEnd;\n                this.sequenceIndex = 0;\n                this.sectionStart = this._index + 1;\n            }\n        }\n        else {\n            this.sequenceIndex = 0;\n            this._state = 16 /* InDeclaration */;\n            this.stateInDeclaration(c); // Reconsume the character\n        }\n    };\n    /**\n     * When we wait for one specific character, we can speed things up\n     * by skipping through the buffer until we find it.\n     *\n     * @returns Whether the character was found.\n     */\n    Tokenizer.prototype.fastForwardTo = function (c) {\n        while (++this._index < this.buffer.length) {\n            if (this.buffer.charCodeAt(this._index) === c) {\n                return true;\n            }\n        }\n        /*\n         * We increment the index at the end of the `parse` loop,\n         * so set it to `buffer.length - 1` here.\n         *\n         * TODO: Refactor `parse` to increment index before calling states.\n         */\n        this._index = this.buffer.length - 1;\n        return false;\n    };\n    /**\n     * Comments and CDATA end with `-->` and `]]>`.\n     *\n     * Their common qualities are:\n     * - Their end sequences have a distinct character they start with.\n     * - That character is then repeated, so we have to check multiple repeats.\n     * - All characters but the start character of the sequence can be skipped.\n     */\n    Tokenizer.prototype.stateInCommentLike = function (c) {\n        if (c === this.currentSequence[this.sequenceIndex]) {\n            if (++this.sequenceIndex === this.currentSequence.length) {\n                // Remove 2 trailing chars\n                var section = this.buffer.slice(this.sectionStart, this._index - 2);\n                if (this.currentSequence === Sequences.CdataEnd) {\n                    this.cbs.oncdata(section);\n                }\n                else {\n                    this.cbs.oncomment(section);\n                }\n                this.sequenceIndex = 0;\n                this.sectionStart = this._index + 1;\n                this._state = 1 /* Text */;\n            }\n        }\n        else if (this.sequenceIndex === 0) {\n            // Fast-forward to the first character of the sequence\n            if (this.fastForwardTo(this.currentSequence[0])) {\n                this.sequenceIndex = 1;\n            }\n        }\n        else if (c !== this.currentSequence[this.sequenceIndex - 1]) {\n            // Allow long sequences, eg. --->, ]]]>\n            this.sequenceIndex = 0;\n        }\n    };\n    /**\n     * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.\n     *\n     * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).\n     * We allow anything that wouldn't end the tag.\n     */\n    Tokenizer.prototype.isTagStartChar = function (c) {\n        return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);\n    };\n    Tokenizer.prototype.startSpecial = function (sequence, offset) {\n        this.isSpecial = true;\n        this.currentSequence = sequence;\n        this.sequenceIndex = offset;\n        this._state = 23 /* SpecialStartSequence */;\n    };\n    Tokenizer.prototype.stateBeforeTagName = function (c) {\n        if (c === 33 /* ExclamationMark */) {\n            this._state = 15 /* BeforeDeclaration */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c === 63 /* Questionmark */) {\n            this._state = 17 /* InProcessingInstruction */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (this.isTagStartChar(c)) {\n            var lower = c | 0x20;\n            this.sectionStart = this._index;\n            if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {\n                this.startSpecial(Sequences.TitleEnd, 3);\n            }\n            else {\n                this._state =\n                    !this.xmlMode && lower === Sequences.ScriptEnd[2]\n                        ? 22 /* BeforeSpecialS */\n                        : 3 /* InTagName */;\n            }\n        }\n        else if (c === 47 /* Slash */) {\n            this._state = 5 /* BeforeClosingTagName */;\n        }\n        else {\n            this._state = 1 /* Text */;\n            this.stateText(c);\n        }\n    };\n    Tokenizer.prototype.stateInTagName = function (c) {\n        if (isEndOfTagSection(c)) {\n            this.cbs.onopentagname(this.getSection());\n            this.sectionStart = -1;\n            this._state = 8 /* BeforeAttributeName */;\n            this.stateBeforeAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateBeforeClosingTagName = function (c) {\n        if (isWhitespace(c)) {\n            // Ignore\n        }\n        else if (c === 62 /* Gt */) {\n            this._state = 1 /* Text */;\n        }\n        else {\n            this._state = this.isTagStartChar(c)\n                ? 6 /* InClosingTagName */\n                : 20 /* InSpecialComment */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateInClosingTagName = function (c) {\n        if (c === 62 /* Gt */ || isWhitespace(c)) {\n            this.cbs.onclosetag(this.getSection());\n            this.sectionStart = -1;\n            this._state = 7 /* AfterClosingTagName */;\n            this.stateAfterClosingTagName(c);\n        }\n    };\n    Tokenizer.prototype.stateAfterClosingTagName = function (c) {\n        // Skip everything until \">\"\n        if (c === 62 /* Gt */ || this.fastForwardTo(62 /* Gt */)) {\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeName = function (c) {\n        if (c === 62 /* Gt */) {\n            this.cbs.onopentagend();\n            if (this.isSpecial) {\n                this._state = 24 /* InSpecialTag */;\n                this.sequenceIndex = 0;\n            }\n            else {\n                this._state = 1 /* Text */;\n            }\n            this.baseState = this._state;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c === 47 /* Slash */) {\n            this._state = 4 /* InSelfClosingTag */;\n        }\n        else if (!isWhitespace(c)) {\n            this._state = 9 /* InAttributeName */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateInSelfClosingTag = function (c) {\n        if (c === 62 /* Gt */) {\n            this.cbs.onselfclosingtag();\n            this._state = 1 /* Text */;\n            this.baseState = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n            this.isSpecial = false; // Reset special state, in case of self-closing special tags\n        }\n        else if (!isWhitespace(c)) {\n            this._state = 8 /* BeforeAttributeName */;\n            this.stateBeforeAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateInAttributeName = function (c) {\n        if (c === 61 /* Eq */ || isEndOfTagSection(c)) {\n            this.cbs.onattribname(this.getSection());\n            this.sectionStart = -1;\n            this._state = 10 /* AfterAttributeName */;\n            this.stateAfterAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateAfterAttributeName = function (c) {\n        if (c === 61 /* Eq */) {\n            this._state = 11 /* BeforeAttributeValue */;\n        }\n        else if (c === 47 /* Slash */ || c === 62 /* Gt */) {\n            this.cbs.onattribend(undefined);\n            this._state = 8 /* BeforeAttributeName */;\n            this.stateBeforeAttributeName(c);\n        }\n        else if (!isWhitespace(c)) {\n            this.cbs.onattribend(undefined);\n            this._state = 9 /* InAttributeName */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeValue = function (c) {\n        if (c === 34 /* DoubleQuote */) {\n            this._state = 12 /* InAttributeValueDq */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c === 39 /* SingleQuote */) {\n            this._state = 13 /* InAttributeValueSq */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (!isWhitespace(c)) {\n            this.sectionStart = this._index;\n            this._state = 14 /* InAttributeValueNq */;\n            this.stateInAttributeValueNoQuotes(c); // Reconsume token\n        }\n    };\n    Tokenizer.prototype.handleInAttributeValue = function (c, quote) {\n        if (c === quote ||\n            (!this.decodeEntities && this.fastForwardTo(quote))) {\n            this.cbs.onattribdata(this.getSection());\n            this.sectionStart = -1;\n            this.cbs.onattribend(String.fromCharCode(quote));\n            this._state = 8 /* BeforeAttributeName */;\n        }\n        else if (this.decodeEntities && c === 38 /* Amp */) {\n            this.baseState = this._state;\n            this._state = 25 /* BeforeEntity */;\n        }\n    };\n    Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function (c) {\n        this.handleInAttributeValue(c, 34 /* DoubleQuote */);\n    };\n    Tokenizer.prototype.stateInAttributeValueSingleQuotes = function (c) {\n        this.handleInAttributeValue(c, 39 /* SingleQuote */);\n    };\n    Tokenizer.prototype.stateInAttributeValueNoQuotes = function (c) {\n        if (isWhitespace(c) || c === 62 /* Gt */) {\n            this.cbs.onattribdata(this.getSection());\n            this.sectionStart = -1;\n            this.cbs.onattribend(null);\n            this._state = 8 /* BeforeAttributeName */;\n            this.stateBeforeAttributeName(c);\n        }\n        else if (this.decodeEntities && c === 38 /* Amp */) {\n            this.baseState = this._state;\n            this._state = 25 /* BeforeEntity */;\n        }\n    };\n    Tokenizer.prototype.stateBeforeDeclaration = function (c) {\n        if (c === 91 /* OpeningSquareBracket */) {\n            this._state = 19 /* CDATASequence */;\n            this.sequenceIndex = 0;\n        }\n        else {\n            this._state =\n                c === 45 /* Dash */\n                    ? 18 /* BeforeComment */\n                    : 16 /* InDeclaration */;\n        }\n    };\n    Tokenizer.prototype.stateInDeclaration = function (c) {\n        if (c === 62 /* Gt */ || this.fastForwardTo(62 /* Gt */)) {\n            this.cbs.ondeclaration(this.getSection());\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateInProcessingInstruction = function (c) {\n        if (c === 62 /* Gt */ || this.fastForwardTo(62 /* Gt */)) {\n            this.cbs.onprocessinginstruction(this.getSection());\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeComment = function (c) {\n        if (c === 45 /* Dash */) {\n            this._state = 21 /* InCommentLike */;\n            this.currentSequence = Sequences.CommentEnd;\n            // Allow short comments (eg. <!-->)\n            this.sequenceIndex = 2;\n            this.sectionStart = this._index + 1;\n        }\n        else {\n            this._state = 16 /* InDeclaration */;\n        }\n    };\n    Tokenizer.prototype.stateInSpecialComment = function (c) {\n        if (c === 62 /* Gt */ || this.fastForwardTo(62 /* Gt */)) {\n            this.cbs.oncomment(this.getSection());\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeSpecialS = function (c) {\n        var lower = c | 0x20;\n        if (lower === Sequences.ScriptEnd[3]) {\n            this.startSpecial(Sequences.ScriptEnd, 4);\n        }\n        else if (lower === Sequences.StyleEnd[3]) {\n            this.startSpecial(Sequences.StyleEnd, 4);\n        }\n        else {\n            this._state = 3 /* InTagName */;\n            this.stateInTagName(c); // Consume the token again\n        }\n    };\n    Tokenizer.prototype.stateBeforeEntity = function (c) {\n        // Start excess with 1 to include the '&'\n        this.entityExcess = 1;\n        if (c === 35 /* Num */) {\n            this._state = 26 /* BeforeNumericEntity */;\n        }\n        else if (c === 38 /* Amp */) {\n            // We have two `&` characters in a row. Stay in the current state.\n        }\n        else {\n            this.trieIndex = 0;\n            this.trieCurrent = this.entityTrie[0];\n            this.trieResult = null;\n            this._state = 27 /* InNamedEntity */;\n            this.stateInNamedEntity(c);\n        }\n    };\n    Tokenizer.prototype.stateInNamedEntity = function (c) {\n        this.entityExcess += 1;\n        this.trieIndex = (0, decode_1.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);\n        if (this.trieIndex < 0) {\n            this.emitNamedEntity();\n            this._index--;\n            return;\n        }\n        this.trieCurrent = this.entityTrie[this.trieIndex];\n        // If the branch is a value, store it and continue\n        if (this.trieCurrent & decode_1.BinTrieFlags.HAS_VALUE) {\n            // If we have a legacy entity while parsing strictly, just skip the number of bytes\n            if (!this.allowLegacyEntity() && c !== 59 /* Semi */) {\n                // No need to consider multi-byte values, as the legacy entity is always a single byte\n                this.trieIndex += 1;\n            }\n            else {\n                // Add 1 as we have already incremented the excess\n                var entityStart = this._index - this.entityExcess + 1;\n                if (entityStart > this.sectionStart) {\n                    this.emitPartial(this.buffer.substring(this.sectionStart, entityStart));\n                }\n                // If this is a surrogate pair, combine the higher bits from the node with the next byte\n                this.trieResult =\n                    this.trieCurrent & decode_1.BinTrieFlags.MULTI_BYTE\n                        ? String.fromCharCode(this.entityTrie[++this.trieIndex], this.entityTrie[++this.trieIndex])\n                        : String.fromCharCode(this.entityTrie[++this.trieIndex]);\n                this.entityExcess = 0;\n                this.sectionStart = this._index + 1;\n            }\n        }\n    };\n    Tokenizer.prototype.emitNamedEntity = function () {\n        if (this.trieResult) {\n            this.emitPartial(this.trieResult);\n        }\n        this._state = this.baseState;\n    };\n    Tokenizer.prototype.stateBeforeNumericEntity = function (c) {\n        if ((c | 0x20) === 120 /* LowerX */) {\n            this.entityExcess++;\n            this._state = 29 /* InHexEntity */;\n        }\n        else {\n            this._state = 28 /* InNumericEntity */;\n            this.stateInNumericEntity(c);\n        }\n    };\n    Tokenizer.prototype.decodeNumericEntity = function (base, strict) {\n        var entityStart = this._index - this.entityExcess - 1;\n        var numberStart = entityStart + 2 + (base >> 4);\n        if (numberStart !== this._index) {\n            // Emit leading data if any\n            if (entityStart > this.sectionStart) {\n                this.emitPartial(this.buffer.substring(this.sectionStart, entityStart));\n            }\n            // Parse entity\n            var entity = this.buffer.substring(numberStart, this._index);\n            var parsed = parseInt(entity, base);\n            this.emitPartial((0, decode_codepoint_1.default)(parsed));\n            this.sectionStart = this._index + Number(strict);\n        }\n        this._state = this.baseState;\n    };\n    Tokenizer.prototype.stateInNumericEntity = function (c) {\n        if (c === 59 /* Semi */) {\n            this.decodeNumericEntity(10, true);\n        }\n        else if (!isNumber(c)) {\n            if (this.allowLegacyEntity()) {\n                this.decodeNumericEntity(10, false);\n            }\n            else {\n                this._state = this.baseState;\n            }\n            this._index--;\n        }\n        else {\n            this.entityExcess++;\n        }\n    };\n    Tokenizer.prototype.stateInHexEntity = function (c) {\n        if (c === 59 /* Semi */) {\n            this.decodeNumericEntity(16, true);\n        }\n        else if ((c < 97 /* LowerA */ || c > 102 /* LowerF */) &&\n            (c < 65 /* UpperA */ || c > 70 /* UpperF */) &&\n            !isNumber(c)) {\n            if (this.allowLegacyEntity()) {\n                this.decodeNumericEntity(16, false);\n            }\n            else {\n                this._state = this.baseState;\n            }\n            this._index--;\n        }\n        else {\n            this.entityExcess++;\n        }\n    };\n    Tokenizer.prototype.allowLegacyEntity = function () {\n        return (!this.xmlMode &&\n            (this.baseState === 1 /* Text */ ||\n                this.baseState === 24 /* InSpecialTag */));\n    };\n    /**\n     * Remove data that has already been consumed from the buffer.\n     */\n    Tokenizer.prototype.cleanup = function () {\n        // If we are inside of text, emit what we already have.\n        if (this.running &&\n            this.sectionStart !== this._index &&\n            (this._state === 1 /* Text */ ||\n                (this._state === 24 /* InSpecialTag */ &&\n                    this.sequenceIndex === 0))) {\n            // TODO: We could emit attribute data here as well.\n            this.cbs.ontext(this.buffer.substr(this.sectionStart));\n            this.sectionStart = this._index;\n        }\n        var start = this.sectionStart < 0 ? this._index : this.sectionStart;\n        this.buffer =\n            start === this.buffer.length ? \"\" : this.buffer.substr(start);\n        this._index -= start;\n        this.bufferOffset += start;\n        if (this.sectionStart > 0) {\n            this.sectionStart = 0;\n        }\n    };\n    Tokenizer.prototype.shouldContinue = function () {\n        return this._index < this.buffer.length && this.running;\n    };\n    /**\n     * Iterates through the buffer, calling the function corresponding to the current state.\n     *\n     * States that are more likely to be hit are higher up, as a performance improvement.\n     */\n    Tokenizer.prototype.parse = function () {\n        while (this.shouldContinue()) {\n            var c = this.buffer.charCodeAt(this._index);\n            if (this._state === 1 /* Text */) {\n                this.stateText(c);\n            }\n            else if (this._state === 23 /* SpecialStartSequence */) {\n                this.stateSpecialStartSequence(c);\n            }\n            else if (this._state === 24 /* InSpecialTag */) {\n                this.stateInSpecialTag(c);\n            }\n            else if (this._state === 19 /* CDATASequence */) {\n                this.stateCDATASequence(c);\n            }\n            else if (this._state === 12 /* InAttributeValueDq */) {\n                this.stateInAttributeValueDoubleQuotes(c);\n            }\n            else if (this._state === 9 /* InAttributeName */) {\n                this.stateInAttributeName(c);\n            }\n            else if (this._state === 21 /* InCommentLike */) {\n                this.stateInCommentLike(c);\n            }\n            else if (this._state === 20 /* InSpecialComment */) {\n                this.stateInSpecialComment(c);\n            }\n            else if (this._state === 8 /* BeforeAttributeName */) {\n                this.stateBeforeAttributeName(c);\n            }\n            else if (this._state === 3 /* InTagName */) {\n                this.stateInTagName(c);\n            }\n            else if (this._state === 6 /* InClosingTagName */) {\n                this.stateInClosingTagName(c);\n            }\n            else if (this._state === 2 /* BeforeTagName */) {\n                this.stateBeforeTagName(c);\n            }\n            else if (this._state === 10 /* AfterAttributeName */) {\n                this.stateAfterAttributeName(c);\n            }\n            else if (this._state === 13 /* InAttributeValueSq */) {\n                this.stateInAttributeValueSingleQuotes(c);\n            }\n            else if (this._state === 11 /* BeforeAttributeValue */) {\n                this.stateBeforeAttributeValue(c);\n            }\n            else if (this._state === 5 /* BeforeClosingTagName */) {\n                this.stateBeforeClosingTagName(c);\n            }\n            else if (this._state === 7 /* AfterClosingTagName */) {\n                this.stateAfterClosingTagName(c);\n            }\n            else if (this._state === 22 /* BeforeSpecialS */) {\n                this.stateBeforeSpecialS(c);\n            }\n            else if (this._state === 14 /* InAttributeValueNq */) {\n                this.stateInAttributeValueNoQuotes(c);\n            }\n            else if (this._state === 4 /* InSelfClosingTag */) {\n                this.stateInSelfClosingTag(c);\n            }\n            else if (this._state === 16 /* InDeclaration */) {\n                this.stateInDeclaration(c);\n            }\n            else if (this._state === 15 /* BeforeDeclaration */) {\n                this.stateBeforeDeclaration(c);\n            }\n            else if (this._state === 18 /* BeforeComment */) {\n                this.stateBeforeComment(c);\n            }\n            else if (this._state === 17 /* InProcessingInstruction */) {\n                this.stateInProcessingInstruction(c);\n            }\n            else if (this._state === 27 /* InNamedEntity */) {\n                this.stateInNamedEntity(c);\n            }\n            else if (this._state === 25 /* BeforeEntity */) {\n                this.stateBeforeEntity(c);\n            }\n            else if (this._state === 29 /* InHexEntity */) {\n                this.stateInHexEntity(c);\n            }\n            else if (this._state === 28 /* InNumericEntity */) {\n                this.stateInNumericEntity(c);\n            }\n            else {\n                // `this._state === State.BeforeNumericEntity`\n                this.stateBeforeNumericEntity(c);\n            }\n            this._index++;\n        }\n        this.cleanup();\n    };\n    Tokenizer.prototype.finish = function () {\n        if (this._state === 27 /* InNamedEntity */) {\n            this.emitNamedEntity();\n        }\n        // If there is remaining data, emit it in a reasonable way\n        if (this.sectionStart < this._index) {\n            this.handleTrailingData();\n        }\n        this.cbs.onend();\n    };\n    /** Handle any trailing data. */\n    Tokenizer.prototype.handleTrailingData = function () {\n        var data = this.buffer.substr(this.sectionStart);\n        if (this._state === 21 /* InCommentLike */) {\n            if (this.currentSequence === Sequences.CdataEnd) {\n                this.cbs.oncdata(data);\n            }\n            else {\n                this.cbs.oncomment(data);\n            }\n        }\n        else if (this._state === 28 /* InNumericEntity */ &&\n            this.allowLegacyEntity()) {\n            this.decodeNumericEntity(10, false);\n            // All trailing data will have been consumed\n        }\n        else if (this._state === 29 /* InHexEntity */ &&\n            this.allowLegacyEntity()) {\n            this.decodeNumericEntity(16, false);\n            // All trailing data will have been consumed\n        }\n        else if (this._state === 3 /* InTagName */ ||\n            this._state === 8 /* BeforeAttributeName */ ||\n            this._state === 11 /* BeforeAttributeValue */ ||\n            this._state === 10 /* AfterAttributeName */ ||\n            this._state === 9 /* InAttributeName */ ||\n            this._state === 13 /* InAttributeValueSq */ ||\n            this._state === 12 /* InAttributeValueDq */ ||\n            this._state === 14 /* InAttributeValueNq */ ||\n            this._state === 6 /* InClosingTagName */) {\n            /*\n             * If we are currently in an opening or closing tag, us not calling the\n             * respective callback signals that the tag should be ignored.\n             */\n        }\n        else {\n            this.cbs.ontext(data);\n        }\n    };\n    Tokenizer.prototype.getSection = function () {\n        return this.buffer.substring(this.sectionStart, this._index);\n    };\n    Tokenizer.prototype.emitPartial = function (value) {\n        if (this.baseState !== 1 /* Text */ &&\n            this.baseState !== 24 /* InSpecialTag */) {\n            this.cbs.onattribdata(value);\n        }\n        else {\n            this.cbs.ontext(value);\n        }\n    };\n    return Tokenizer;\n}());\nexports.default = Tokenizer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}