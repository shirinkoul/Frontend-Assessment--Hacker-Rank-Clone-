{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CSSProcessedProps = void 0;\nvar _emptyProps = require(\"./emptyProps\");\nvar _mergeProps = _interopRequireDefault(require(\"./mergeProps\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nconst compatCategories = ['native', 'web'];\nconst displayCategories = ['text', 'block'];\nconst propagationCategories = ['flow', 'retain'];\n/**\n * An object representing categorized style props. Props are categorized\n * depending on their inheritability (flow, retain), target (block, text)\n * and (react) native support (native, web).\n */\n\nclass CSSProcessedProps {\n  constructor() {\n    _defineProperty(this, \"native\", void 0);\n    _defineProperty(this, \"web\", void 0);\n    this.native = this.newCompatCategory();\n    this.web = this.newCompatCategory();\n  }\n  newCompatCategory() {\n    return {\n      block: {\n        retain: _emptyProps.emptyProps,\n        flow: _emptyProps.emptyProps\n      },\n      text: {\n        retain: _emptyProps.emptyProps,\n        flow: _emptyProps.emptyProps\n      }\n    };\n  }\n  withProperty(propertyName, propertyValue, _ref) {\n    let {\n      compatCategory,\n      displayCategory,\n      propagationCategory\n    } = _ref;\n    if (propertyValue !== null) {\n      const target = this[compatCategory][displayCategory][propagationCategory];\n      if (!(0, _emptyProps.isNotEmpty)(target)) {\n        this[compatCategory][displayCategory][propagationCategory] = {};\n      } //@ts-ignore\n\n      this[compatCategory][displayCategory][propagationCategory][propertyName] = propertyValue;\n    }\n    return this;\n  }\n  /**\n   * Create a new processed prop object by merging the 'overriders' parameters\n   * into this object.\n   *\n   * @param overriders - The processed props which will be merged into this\n   * processed prop. Rightmost props will override leftmost props.\n   */\n\n  merge() {\n    for (var _len = arguments.length, overriders = new Array(_len), _key = 0; _key < _len; _key++) {\n      overriders[_key] = arguments[_key];\n    }\n    const filtered = overriders.filter(_emptyProps.isNotEmpty);\n    const next = new CSSProcessedProps();\n    for (const compat of compatCategories) {\n      for (const display of displayCategories) {\n        for (const propagation of propagationCategories) {\n          next[compat][display][propagation] = (0, _mergeProps.default)([this[compat][display][propagation], ...filtered.map(o => o[compat][display][propagation])]);\n        }\n      }\n    }\n    return next;\n  }\n  static new() {\n    return new CSSProcessedProps();\n  }\n}\nexports.CSSProcessedProps = CSSProcessedProps;","map":{"version":3,"mappings":";;;;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;AAmBA,MAAMA,gBAA0D,GAAG,CACjE,QADiE,EAEjE,KAFiE,CAAnE;AAIA,MAAMC,iBAA4D,GAAG,CACnE,MADmE,EAEnE,OAFmE,CAArE;AAIA,MAAMC,qBAAoE,GAAG,CAC3E,MAD2E,EAE3E,QAF2E,CAA7E;AAKA;AACA;AACA;AACA;AACA;;AACO,MAAMC,iBAAN,CAEP;EAqCEC,WAAW,GAAG;IAAAC;IAAAA;IACZ,KAAKC,MAAL,GAAc,KAAKC,iBAAL,EAAd;IACA,KAAKC,GAAL,GAAW,KAAKD,iBAAL,EAAX;EACD;EAEOA,iBAAiB,GAEC;IACxB,OAAO;MACLE,KAAK,EAAE;QACLC,MAAM,EAAEC,sBADH;QAELC,IAAI,EAAED;MAFD,CADF;MAKLE,IAAI,EAAE;QACJH,MAAM,EAAEC,sBADJ;QAEJC,IAAI,EAAED;MAFF;IALD,CAAP;EAUD;EAEMG,YAAY,CACjBC,YADiB,EAEjBC,aAFiB,QAIjB;IAAA,IADA;MAAEC,cAAF;MAAkBC,eAAlB;MAAmCC;IAAnC,CAHiB;IAKjB,IAAIH,aAAa,KAAK,IAAtB,EAA4B;MAC1B,MAAMI,MAAM,GAAG,KAAKH,cAAL,EAAqBC,eAArB,EAAsCC,mBAAtC,CAAf;MACA,IAAI,CAAC,4BAAWC,MAAX,CAAL,EAAyB;QACvB,KAAKH,cAAL,EAAqBC,eAArB,EAAsCC,mBAAtC,IAA6D,EAA7D;MACD,CAJyB,CAK1B;;MACA,KAAKF,cAAL,EAAqBC,eAArB,EAAsCC,mBAAtC,EAA2DJ,YAA3D,IACEC,aADF;IAED;IACD,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EACSK,KAAK,GAAiD;IAAA,kCAA7CC,UAAJ;MAAIA,UAAJ;IAAA;IACV,MAAMC,QAAQ,GAAGD,UAAU,CAACE,MAAX,CAAkBC,sBAAlB,CAAjB;IACA,MAAMC,IAAI,GAAG,IAAIvB,iBAAJ,EAAb;IACA,KAAK,MAAMwB,MAAX,IAAqB3B,gBAArB,EAAuC;MACrC,KAAK,MAAM4B,OAAX,IAAsB3B,iBAAtB,EAAyC;QACvC,KAAK,MAAM4B,WAAX,IAA0B3B,qBAA1B,EAAiD;UAC/CwB,IAAI,CAACC,MAAD,CAAJ,CAAaC,OAAb,EAAsBC,WAAtB,IAAqC,yBAAW,CAC9C,KAAKF,MAAL,EAAaC,OAAb,EAAsBC,WAAtB,CAD8C,EAE9C,GAAGN,QAAQ,CAACO,GAAT,CAAcC,CAAD,IAAOA,CAAC,CAACJ,MAAD,CAAD,CAAUC,OAAV,EAAmBC,WAAnB,CAApB,CAF2C,CAAX,CAArC;QAID;MACF;IACF;IACD,OAAOH,IAAP;EACD;EAES,OAAHM,GAAG,GAAG;IACX,OAAO,IAAI7B,iBAAJ,EAAP;EACD;AAnGH","names":["compatCategories","displayCategories","propagationCategories","CSSProcessedProps","constructor","_defineProperty","native","newCompatCategory","web","block","retain","emptyProps","flow","text","withProperty","propertyName","propertyValue","compatCategory","displayCategory","propagationCategory","target","merge","overriders","filtered","filter","isNotEmpty","next","compat","display","propagation","map","o","new"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/@native-html/css-processor/lib/commonjs/CSSProcessedProps.ts"],"sourcesContent":["import { CSSProperties } from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { MixedStyleDeclaration } from './CSSProcessor';\nimport { emptyProps, isNotEmpty } from './emptyProps';\nimport mergeProps from './mergeProps';\nimport {\n  CSSPropertyCompatCategory,\n  CSSDisplayRegistry,\n  WebTextFlowProperties,\n  CSSPropertySpecs,\n  CSSPropertyDisplayCategory,\n  CSSPropertyPropagationCategory\n} from './processor-types';\nimport {\n  CSSLongNativeTranslatableBlockFlowedPropKey,\n  CSSLongNativeTranslatableBlockRetainedPropKey,\n  CSSLongNativeTranslatableTextFlowedPropKey,\n  CSSLongNativeTranslatableTextRetainedPropKey,\n  CSSLongNativeUntranslatableBlockFlowedPropKey,\n  CSSLongNativeUntranslatableBlockPropKey,\n  CSSLongWebTextRetainedPropKey\n} from './property-types';\n\nconst compatCategories: ReadonlyArray<CSSPropertyCompatCategory> = [\n  'native',\n  'web'\n];\nconst displayCategories: ReadonlyArray<CSSPropertyDisplayCategory> = [\n  'text',\n  'block'\n];\nconst propagationCategories: ReadonlyArray<CSSPropertyPropagationCategory> = [\n  'flow',\n  'retain'\n];\n\n/**\n * An object representing categorized style props. Props are categorized\n * depending on their inheritability (flow, retain), target (block, text)\n * and (react) native support (native, web).\n */\nexport class CSSProcessedProps\n  implements Record<CSSPropertyCompatCategory, CSSDisplayRegistry>\n{\n  readonly native: {\n    text: {\n      flow: Partial<\n        Pick<TextStyle, CSSLongNativeTranslatableTextFlowedPropKey>\n      >;\n      retain: Partial<\n        Pick<TextStyle, CSSLongNativeTranslatableTextRetainedPropKey>\n      >;\n    };\n    block: {\n      flow: Partial<\n        Pick<ViewStyle, CSSLongNativeTranslatableBlockFlowedPropKey>\n      >;\n      retain: Partial<\n        Pick<ViewStyle, CSSLongNativeTranslatableBlockRetainedPropKey>\n      >;\n    };\n  };\n  readonly web: {\n    text: {\n      flow: Partial<WebTextFlowProperties> & CSSProperties;\n      retain: Partial<Record<CSSLongWebTextRetainedPropKey, any>> &\n        CSSProperties;\n    };\n    block: {\n      flow: Partial<\n        Pick<ViewStyle, CSSLongNativeUntranslatableBlockFlowedPropKey>\n      > &\n        CSSProperties;\n      retain: Partial<\n        Pick<ViewStyle, CSSLongNativeUntranslatableBlockPropKey>\n      > &\n        CSSProperties;\n    };\n  };\n\n  constructor() {\n    this.native = this.newCompatCategory<'native'>();\n    this.web = this.newCompatCategory<'web'>();\n  }\n\n  private newCompatCategory<\n    T extends CSSPropertyCompatCategory\n  >(): CSSProcessedProps[T] {\n    return {\n      block: {\n        retain: emptyProps,\n        flow: emptyProps\n      },\n      text: {\n        retain: emptyProps,\n        flow: emptyProps\n      }\n    };\n  }\n\n  public withProperty<K extends keyof MixedStyleDeclaration>(\n    propertyName: K,\n    propertyValue: MixedStyleDeclaration[K],\n    { compatCategory, displayCategory, propagationCategory }: CSSPropertySpecs\n  ) {\n    if (propertyValue !== null) {\n      const target = this[compatCategory][displayCategory][propagationCategory];\n      if (!isNotEmpty(target)) {\n        this[compatCategory][displayCategory][propagationCategory] = {};\n      }\n      //@ts-ignore\n      this[compatCategory][displayCategory][propagationCategory][propertyName] =\n        propertyValue;\n    }\n    return this;\n  }\n\n  /**\n   * Create a new processed prop object by merging the 'overriders' parameters\n   * into this object.\n   *\n   * @param overriders - The processed props which will be merged into this\n   * processed prop. Rightmost props will override leftmost props.\n   */\n  public merge(...overriders: Array<CSSProcessedProps | null>) {\n    const filtered = overriders.filter(isNotEmpty);\n    const next = new CSSProcessedProps();\n    for (const compat of compatCategories) {\n      for (const display of displayCategories) {\n        for (const propagation of propagationCategories) {\n          next[compat][display][propagation] = mergeProps([\n            this[compat][display][propagation],\n            ...filtered.map((o) => o[compat][display][propagation])\n          ]);\n        }\n      }\n    }\n    return next;\n  }\n\n  static new() {\n    return new CSSProcessedProps();\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}