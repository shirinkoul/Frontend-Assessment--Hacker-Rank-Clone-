{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mapNodeList = mapNodeList;\nexports.bindChildren = bindChildren;\nexports.translateNode = translateNode;\nexports.translateDocument = translateDocument;\nvar _TTextCtor = require(\"../tree/TTextCtor\");\nvar _TPhrasingCtor = require(\"../tree/TPhrasingCtor\");\nvar _TBlockCtor = require(\"../tree/TBlockCtor\");\nvar _TDocumentImpl = require(\"../tree/TDocumentImpl\");\nvar _domUtils = require(\"../dom/dom-utils\");\nvar _TEmptyCtor = require(\"../tree/TEmptyCtor\");\nfunction mapNodeList(_ref) {\n  let {\n    nodeList,\n    parent,\n    parentStyles,\n    params\n  } = _ref;\n  const nextMap = [];\n  for (const i in nodeList) {\n    const child = nodeList[i];\n    const translated = translateNode({\n      node: child,\n      parentStyles,\n      params,\n      nodeIndex: Number(i),\n      parent\n    });\n    if (translated) {\n      nextMap.push(translated);\n    }\n  }\n  return nextMap;\n}\nfunction bindChildren(node, children, params) {\n  if (!node.elementModel || !node.elementModel.isOpaque) {\n    node.bindChildren(mapNodeList({\n      nodeList: children,\n      parent: node,\n      params\n    }));\n  }\n}\nfunction translateElement(_ref2) {\n  let {\n    node,\n    nodeIndex,\n    params,\n    parent,\n    parentStyles\n  } = _ref2;\n  const tagName = node.tagName;\n  const sharedProps = {\n    nodeIndex,\n    parentStyles,\n    context: params,\n    domNode: node,\n    parent\n  };\n  const elementModel = params.modelRegistry.getElementModelFromTagName(tagName);\n  if (!elementModel) {\n    return new _TEmptyCtor.TEmptyCtor({\n      ...sharedProps,\n      isUnregistered: true,\n      elementModel,\n      domNode: node\n    });\n  }\n  if (elementModel.isTranslatableTextual()) {\n    if (node.children.length === 1) {\n      const child = node.children[0];\n      if ((0, _domUtils.isDomText)(child)) {\n        return new _TTextCtor.TTextCtor({\n          ...sharedProps,\n          elementModel,\n          textNode: child,\n          domNode: node\n        });\n      }\n    } else if (node.children.length === 0) {\n      return new _TTextCtor.TTextCtor({\n        ...sharedProps,\n        elementModel,\n        domNode: node,\n        textNode: new _domUtils.Text('')\n      });\n    }\n    const phrasing = new _TPhrasingCtor.TPhrasingCtor({\n      ...sharedProps,\n      domNode: node,\n      elementModel\n    });\n    bindChildren(phrasing, node.children, params);\n    return phrasing;\n  }\n  if (elementModel.isTranslatableBlock()) {\n    const block = new _TBlockCtor.TBlockCtor({\n      ...sharedProps,\n      elementModel,\n      parentStyles,\n      domNode: node\n    });\n    bindChildren(block, node.children, params);\n    return block;\n  }\n  return new _TEmptyCtor.TEmptyCtor({\n    ...sharedProps,\n    isUnregistered: false,\n    elementModel,\n    domNode: node\n  });\n}\nfunction translateNode(_ref3) {\n  let {\n    node,\n    parentStyles,\n    params,\n    nodeIndex,\n    parent\n  } = _ref3;\n  if ((0, _domUtils.isDomText)(node)) {\n    return new _TTextCtor.TTextCtor({\n      textNode: node,\n      context: params,\n      parentStyles,\n      domNode: null,\n      elementModel: null,\n      nodeIndex,\n      parent\n    });\n  }\n  if ((0, _domUtils.isDomElement)(node)) {\n    return translateElement({\n      node,\n      parentStyles,\n      params,\n      nodeIndex,\n      parent\n    });\n  }\n  return null;\n}\nfunction translateDocument(document, params) {\n  const tdoc = new _TDocumentImpl.TDocumentCtor({\n    context: params,\n    styles: params.baseStyles,\n    domNode: document\n  });\n  bindChildren(tdoc, document.children, params);\n  tdoc.parseChildren();\n  return tdoc;\n}","map":{"version":3,"mappings":"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","names":["mapNodeList","nodeList","parent","parentStyles","params","nextMap","i","child","translated","translateNode","node","nodeIndex","Number","push","bindChildren","children","elementModel","isOpaque","translateElement","tagName","sharedProps","context","domNode","modelRegistry","getElementModelFromTagName","TEmptyCtor","isUnregistered","isTranslatableTextual","length","TTextCtor","textNode","Text","phrasing","TPhrasingCtor","isTranslatableBlock","block","TBlockCtor","translateDocument","document","tdoc","TDocumentCtor","styles","baseStyles","parseChildren"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/@native-html/transient-render-engine/lib/commonjs/flow/translate.ts"],"sourcesContent":["import { TNodeImpl, TNodeInit } from '../tree/tree-types';\nimport { Document } from 'domhandler';\nimport { TTextCtor } from '../tree/TTextCtor';\nimport { TPhrasingCtor } from '../tree/TPhrasingCtor';\nimport { TBlockCtor } from '../tree/TBlockCtor';\nimport { TDocumentCtor, TDocumentImpl } from '../tree/TDocumentImpl';\nimport { isDomElement, isDomText, Element, Node, Text } from '../dom/dom-utils';\nimport { TStyles } from '../styles/TStyles';\n\nimport { TEmptyCtor } from '../tree/TEmptyCtor';\nimport { DataFlowParams } from './types';\n\nexport function mapNodeList({\n  nodeList,\n  parent,\n  parentStyles,\n  params\n}: {\n  nodeList: Node[];\n  parentStyles?: TStyles;\n  parent: TNodeImpl | null;\n  params: DataFlowParams;\n}): TNodeImpl[] {\n  const nextMap: TNodeImpl[] = [];\n  for (const i in nodeList) {\n    const child = nodeList[i];\n    const translated = translateNode({\n      node: child,\n      parentStyles,\n      params,\n      nodeIndex: Number(i),\n      parent\n    });\n    if (translated) {\n      nextMap.push(translated);\n    }\n  }\n  return nextMap;\n}\n\nexport function bindChildren(\n  node: TNodeImpl,\n  children: Node[],\n  params: DataFlowParams\n) {\n  if (!node.elementModel || !node.elementModel.isOpaque) {\n    node.bindChildren(\n      mapNodeList({\n        nodeList: children,\n        parent: node,\n        params\n      })\n    );\n  }\n}\n\nfunction translateElement({\n  node,\n  nodeIndex,\n  params,\n  parent,\n  parentStyles\n}: TranslateParams<Element>): TNodeImpl | null {\n  const tagName = node.tagName;\n  const sharedProps: Omit<TNodeInit, 'contentModel' | 'elementModel'> = {\n    nodeIndex,\n    parentStyles,\n    context: params,\n    domNode: node,\n    parent\n  };\n  const elementModel = params.modelRegistry.getElementModelFromTagName(tagName);\n  if (!elementModel) {\n    return new TEmptyCtor({\n      ...sharedProps,\n      isUnregistered: true,\n      elementModel,\n      domNode: node\n    });\n  }\n  if (elementModel.isTranslatableTextual()) {\n    if (node.children.length === 1) {\n      const child = node.children[0] as Node;\n      if (isDomText(child)) {\n        return new TTextCtor({\n          ...sharedProps,\n          elementModel,\n          textNode: child,\n          domNode: node\n        });\n      }\n    } else if (node.children.length === 0) {\n      return new TTextCtor({\n        ...sharedProps,\n        elementModel,\n        domNode: node,\n        textNode: new Text('')\n      });\n    }\n    const phrasing = new TPhrasingCtor({\n      ...sharedProps,\n      domNode: node,\n      elementModel\n    });\n    bindChildren(phrasing, node.children, params);\n    return phrasing;\n  }\n  if (elementModel.isTranslatableBlock()) {\n    const block = new TBlockCtor({\n      ...sharedProps,\n      elementModel,\n      parentStyles,\n      domNode: node\n    });\n    bindChildren(block, node.children, params);\n    return block;\n  }\n  return new TEmptyCtor({\n    ...sharedProps,\n    isUnregistered: false,\n    elementModel,\n    domNode: node\n  });\n}\n\ninterface TranslateParams<T = Node> {\n  node: T;\n  params: DataFlowParams;\n  parent: TNodeImpl | null;\n  parentStyles?: TStyles;\n  nodeIndex?: number;\n}\n\nexport function translateNode({\n  node,\n  parentStyles,\n  params,\n  nodeIndex,\n  parent\n}: TranslateParams<Node | null>): TNodeImpl | null {\n  if (isDomText(node)) {\n    return new TTextCtor({\n      textNode: node,\n      context: params,\n      parentStyles,\n      domNode: null,\n      elementModel: null,\n      nodeIndex,\n      parent\n    });\n  }\n  if (isDomElement(node)) {\n    return translateElement({\n      node,\n      parentStyles,\n      params,\n      nodeIndex,\n      parent\n    });\n  }\n  return null;\n}\n\nexport function translateDocument(\n  document: Document,\n  params: DataFlowParams\n): TDocumentImpl {\n  const tdoc = new TDocumentCtor({\n    context: params,\n    styles: params.baseStyles,\n    domNode: document as any\n  });\n  bindChildren(tdoc, document.children, params);\n  tdoc.parseChildren();\n  return tdoc;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}