{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ShortFontCSSValidator = void 0;\nvar _ShortCSSToReactNativeValidator = require(\"./ShortCSSToReactNativeValidator\");\nvar _normalizeFontName = _interopRequireDefault(require(\"./normalizeFontName\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst WHITESPACE_REGEX = /\\s+/;\nclass ShortFontCSSValidator extends _ShortCSSToReactNativeValidator.ShortCSSToReactNativeValidator {\n  normalizeInlineCSSValue(value) {\n    // A 'font' declaration may end with a list of multiple font families.\n    // We must check support for this list before processing.\n    const resp = value.split(',');\n    let fontFamily = null;\n    if (resp.length === 1) {\n      return super.normalizeInlineCSSValue(resp[0]);\n    }\n    const base = resp.splice(0, 1)[0];\n    for (const font of resp) {\n      const normalizedFont = (0, _normalizeFontName.default)(font);\n      const isFontSupported = this.config.isFontSupported(normalizedFont);\n      if (isFontSupported) {\n        fontFamily = typeof isFontSupported === 'string' ? isFontSupported : normalizedFont;\n        break;\n      }\n    }\n    return super.normalizeInlineCSSValue(base.split(WHITESPACE_REGEX).slice(0, -1).join(' ') + ' ' + (fontFamily || 'system'));\n  }\n}\nexports.ShortFontCSSValidator = ShortFontCSSValidator;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;;;;;;AAIA,MAAMA,gBAAgB,GAAG,KAAzB;AAEO,MAAMC,qBAAN,SAEGC,8DAFH,CAEqC;EAC1CC,uBAAuB,CAACC,KAAD,EAA0C;IAC/D;IACA;IACA,MAAMC,IAAI,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,CAAb;IACA,IAAIC,UAAU,GAAG,IAAjB;IACA,IAAIF,IAAI,CAACG,MAAL,KAAgB,CAApB,EAAuB;MACrB,OAAO,MAAML,uBAAN,CAA8BE,IAAI,CAAC,CAAD,CAAlC,CAAP;IACD;IACD,MAAMI,IAAI,GAAGJ,IAAI,CAACK,MAAL,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAb;IACA,KAAK,MAAMC,IAAX,IAAmBN,IAAnB,EAAyB;MACvB,MAAMO,cAAc,GAAG,gCAAkBD,IAAlB,CAAvB;MACA,MAAME,eAAe,GAAG,KAAKC,MAAL,CAAYD,eAAZ,CAA4BD,cAA5B,CAAxB;MACA,IAAIC,eAAJ,EAAqB;QACnBN,UAAU,GACR,OAAOM,eAAP,KAA2B,QAA3B,GACIA,eADJ,GAEID,cAHN;QAIA;MACD;IACF;IACD,OAAO,MAAMT,uBAAN,CACLM,IAAI,CAACH,KAAL,CAAWN,gBAAX,EAA6Be,KAA7B,CAAmC,CAAnC,EAAsC,CAAC,CAAvC,EAA0CC,IAA1C,CAA+C,GAA/C,IACE,GADF,IAEGT,UAAU,IAAI,QAFjB,CADK,CAAP;EAKD;AA1ByC","names":["WHITESPACE_REGEX","ShortFontCSSValidator","ShortCSSToReactNativeValidator","normalizeInlineCSSValue","value","resp","split","fontFamily","length","base","splice","font","normalizedFont","isFontSupported","config","slice","join"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/@native-html/css-processor/lib/commonjs/validators/ShortFontCSSValidator.ts"],"sourcesContent":["import { ShortCSSToReactNativeValidator } from './ShortCSSToReactNativeValidator';\nimport normalizeFontName from './normalizeFontName';\nimport { CSSPropertyModel } from './types';\nimport { ShortMergeRequest } from '../ShortMergeRequest';\n\nconst WHITESPACE_REGEX = /\\s+/;\n\nexport class ShortFontCSSValidator<\n  C extends CSSPropertyModel\n> extends ShortCSSToReactNativeValidator<C> {\n  normalizeInlineCSSValue(value: string): ShortMergeRequest | null {\n    // A 'font' declaration may end with a list of multiple font families.\n    // We must check support for this list before processing.\n    const resp = value.split(',');\n    let fontFamily = null;\n    if (resp.length === 1) {\n      return super.normalizeInlineCSSValue(resp[0]);\n    }\n    const base = resp.splice(0, 1)[0];\n    for (const font of resp) {\n      const normalizedFont = normalizeFontName(font);\n      const isFontSupported = this.config.isFontSupported(normalizedFont);\n      if (isFontSupported) {\n        fontFamily =\n          typeof isFontSupported === 'string'\n            ? isFontSupported\n            : normalizedFont;\n        break;\n      }\n    }\n    return super.normalizeInlineCSSValue(\n      base.split(WHITESPACE_REGEX).slice(0, -1).join(' ') +\n        ' ' +\n        (fontFamily || 'system')\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}