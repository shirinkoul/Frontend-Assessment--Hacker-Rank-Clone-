{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CSSPropertiesValidationRegistry = void 0;\nvar _makepropertiesValidators = _interopRequireDefault(require(\"./makepropertiesValidators\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction makeRegistry(list) {\n  const registry = {};\n  list.forEach(prop => {\n    registry[prop] = true;\n  });\n  return registry;\n}\nclass CSSPropertiesValidationRegistry {\n  constructor(config) {\n    _defineProperty(this, \"validators\", void 0);\n    _defineProperty(this, \"ignoredPropertiesRegistry\", void 0);\n    _defineProperty(this, \"allowedPropertiesRegistry\", void 0);\n    this.validators = (0, _makepropertiesValidators.default)(config);\n    this.ignoredPropertiesRegistry = makeRegistry(config.inlinePropertiesBlacklist);\n    this.allowedPropertiesRegistry = config.inlinePropertiesWhitelist ? makeRegistry(config.inlinePropertiesWhitelist) : null;\n  }\n  isInlinePropertyAllowed(name) {\n    if (this.allowedPropertiesRegistry) {\n      return !!this.allowedPropertiesRegistry[name];\n    }\n    return !this.ignoredPropertiesRegistry[name];\n  }\n  shouldRegisterInlineProperty(name) {\n    return this.isInlinePropertyAllowed(name) && !!this.validators[name];\n  }\n  getValidatorForProperty(name) {\n    return this.validators[name] || null;\n  }\n}\nexports.CSSPropertiesValidationRegistry = CSSPropertiesValidationRegistry;","map":{"version":3,"mappings":";;;;;;AACA;;;;;;;;;;;;;;;;;;;AAKA,SAASA,YAAT,CAAsBC,IAAtB,EAAiD;EAC/C,MAAMC,QAAQ,GAAG,EAAjB;EACAD,IAAI,CAACE,OAAL,CAAcC,IAAD,IAAU;IACrBF,QAAQ,CAACE,IAAD,CAAR,GAAiB,IAAjB;EACD,CAFD;EAGA,OAAOF,QAAP;AACD;AAEM,MAAMG,+BAAN,CAAsC;EAO3CC,WAAW,CAACC,MAAD,EAA6B;IAAAC;IAAAA;IAAAA;IACtC,KAAKC,UAAL,GAAkB,uCAAyBF,MAAzB,CAAlB;IACA,KAAKG,yBAAL,GAAiCV,YAAY,CAC3CO,MAAM,CAACI,yBADoC,CAA7C;IAGA,KAAKC,yBAAL,GAAiCL,MAAM,CAACM,yBAAP,GAC7Bb,YAAY,CAACO,MAAM,CAACM,yBAAR,CADiB,GAE7B,IAFJ;EAGD;EAEOC,uBAAuB,CAACC,IAAD,EAAe;IAC5C,IAAI,KAAKH,yBAAT,EAAoC;MAClC,OAAO,CAAC,CAAC,KAAKA,yBAAL,CAA+BG,IAA/B,CAAT;IACD;IACD,OAAO,CAAC,KAAKL,yBAAL,CAA+BK,IAA/B,CAAR;EACD;EAEDC,4BAA4B,CAACD,IAAD,EAA6C;IACvE,OACE,KAAKD,uBAAL,CAA6BC,IAA7B,KACA,CAAC,CAAC,KAAKN,UAAL,CAAgBM,IAAhB,CAFJ;EAID;EAEDE,uBAAuB,CACrBF,IADqB,EAEgD;IACrE,OAAQ,KAAKN,UAAL,CAAgBM,IAAhB,CAAD,IAA0D,IAAjE;EACD;AAnC0C","names":["makeRegistry","list","registry","forEach","prop","CSSPropertiesValidationRegistry","constructor","config","_defineProperty","validators","ignoredPropertiesRegistry","inlinePropertiesBlacklist","allowedPropertiesRegistry","inlinePropertiesWhitelist","isInlinePropertyAllowed","name","shouldRegisterInlineProperty","getValidatorForProperty"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/@native-html/css-processor/lib/commonjs/CSSPropertiesValidationRegistry.ts"],"sourcesContent":["import { CSSProcessorConfig, CSSPropertyNameList } from './config';\nimport makepropertiesValidators, {\n  ValidatorsType\n} from './makepropertiesValidators';\nimport { GenericCSSPropertyValidator } from './validators/GenericPropertyValidator';\n\nfunction makeRegistry(list: CSSPropertyNameList) {\n  const registry = {} as any;\n  list.forEach((prop) => {\n    registry[prop] = true;\n  });\n  return registry;\n}\n\nexport class CSSPropertiesValidationRegistry {\n  public readonly validators: Readonly<ValidatorsType>;\n  public readonly ignoredPropertiesRegistry: Partial<Record<string, true>>;\n  public readonly allowedPropertiesRegistry: Partial<\n    Record<string, true>\n  > | null;\n\n  constructor(config: CSSProcessorConfig) {\n    this.validators = makepropertiesValidators(config);\n    this.ignoredPropertiesRegistry = makeRegistry(\n      config.inlinePropertiesBlacklist\n    );\n    this.allowedPropertiesRegistry = config.inlinePropertiesWhitelist\n      ? makeRegistry(config.inlinePropertiesWhitelist)\n      : null;\n  }\n\n  private isInlinePropertyAllowed(name: string) {\n    if (this.allowedPropertiesRegistry) {\n      return !!this.allowedPropertiesRegistry[name];\n    }\n    return !this.ignoredPropertiesRegistry[name];\n  }\n\n  shouldRegisterInlineProperty(name: string): name is keyof ValidatorsType {\n    return (\n      this.isInlinePropertyAllowed(name) &&\n      !!this.validators[name as keyof ValidatorsType]\n    );\n  }\n\n  getValidatorForProperty<T extends string>(\n    name: T\n  ): T extends keyof ValidatorsType ? GenericCSSPropertyValidator : null {\n    return (this.validators[name as keyof ValidatorsType] as any) || null;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}