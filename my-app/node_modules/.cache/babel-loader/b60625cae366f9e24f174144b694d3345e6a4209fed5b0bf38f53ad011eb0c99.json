{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _useIMGElementState = _interopRequireDefault(require(\"./useIMGElementState\"));\nvar _IMGElementContentSuccess = _interopRequireDefault(require(\"./IMGElementContentSuccess\"));\nvar _IMGElementContainer = _interopRequireDefault(require(\"./IMGElementContainer\"));\nvar _IMGElementContentLoading = _interopRequireDefault(require(\"./IMGElementContentLoading\"));\nvar _IMGElementContentError = _interopRequireDefault(require(\"./IMGElementContentError\"));\nvar _defaultInitialImageDimensions = _interopRequireDefault(require(\"./defaultInitialImageDimensions\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction identity(arg) {\n  return arg;\n}\n/**\n * A component to render images based on an internal loading state.\n *\n * @remarks This component will attempt to draw a box of paint dimensions\n * before retrieving the physical dimensions of the image to avoid layout\n * shifts. See also {@link useIMGElementState}, {@link IMGElementContainer},\n * {@link IMGElementContentSuccess}, {@link IMGElementContentLoading}\n * and {@link IMGElementContentError} for customization.\n */\n\nfunction IMGElement(props) {\n  const state = (0, _useIMGElementState.default)(props);\n  let content;\n  if (state.type === 'success') {\n    content = /*#__PURE__*/_react.default.createElement(_IMGElementContentSuccess.default, state);\n  } else if (state.type === 'loading') {\n    content = /*#__PURE__*/_react.default.createElement(_IMGElementContentLoading.default, state);\n  } else {\n    content = /*#__PURE__*/_react.default.createElement(_IMGElementContentError.default, state);\n  }\n  return /*#__PURE__*/_react.default.createElement(_IMGElementContainer.default, _extends({\n    testID: props.testID\n  }, props.containerProps, {\n    onPress: props.onPress,\n    style: state.containerStyle\n  }), content);\n}\nconst imgDimensionsType = _propTypes.default.shape({\n  width: _propTypes.default.number,\n  height: _propTypes.default.number\n});\nconst propTypes = {\n  source: _propTypes.default.object.isRequired,\n  alt: _propTypes.default.string,\n  altColor: _propTypes.default.string,\n  height: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n  width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n  style: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),\n  computeMaxWidth: _propTypes.default.func.isRequired,\n  contentWidth: _propTypes.default.number,\n  enableExperimentalPercentWidth: _propTypes.default.bool,\n  initialDimensions: imgDimensionsType,\n  onPress: _propTypes.default.func,\n  testID: _propTypes.default.string,\n  objectFit: _propTypes.default.string,\n  cachedNaturalDimensions: imgDimensionsType,\n  containerProps: _propTypes.default.object\n};\n/**\n * @ignore\n */\n\nIMGElement.propTypes = propTypes;\n/**\n * @ignore\n */\n\nIMGElement.defaultProps = {\n  enableExperimentalPercentWidth: false,\n  computeMaxWidth: identity,\n  imagesInitialDimensions: _defaultInitialImageDimensions.default,\n  style: {}\n};\nvar _default = IMGElement;\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;AAIA,SAASA,QAAT,CAAkBC,GAAlB,EAA4B;EAC1B,OAAOA,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA0D;EACxD,MAAMC,KAAK,GAAG,iCAAmBD,KAAnB,CAAd;EACA,IAAIE,OAAJ;EACA,IAAID,KAAK,CAACE,IAAN,KAAe,SAAnB,EAA8B;IAC5BD,OAAO,gBAAGE,eAAMC,aAAN,CAAoBC,iCAApB,EAA8CL,KAA9C,CAAV;EACD,CAFD,MAEO,IAAIA,KAAK,CAACE,IAAN,KAAe,SAAnB,EAA8B;IACnCD,OAAO,gBAAGE,eAAMC,aAAN,CAAoBE,iCAApB,EAA8CN,KAA9C,CAAV;EACD,CAFM,MAEA;IACLC,OAAO,gBAAGE,eAAMC,aAAN,CAAoBG,+BAApB,EAA4CP,KAA5C,CAAV;EACD;EACD,oBACEQ,6BAACC,4BAAD;IACEC,MAAM,EAAEX,KAAK,CAACW;EADhB,GAEMX,KAAK,CAACY,cAFZ;IAGEC,OAAO,EAAEb,KAAK,CAACa,OAHjB;IAIEC,KAAK,EAAEb,KAAK,CAACc;EAJf,IAKGb,OALH,CADF;AASD;AAED,MAAMc,iBAAiB,GAAGC,mBAAUC,KAAV,CAAgB;EACxCC,KAAK,EAAEF,mBAAUG,MADuB;EAExCC,MAAM,EAAEJ,mBAAUG;AAFsB,CAAhB,CAA1B;AAKA,MAAME,SAA6C,GAAG;EACpDC,MAAM,EAAEN,mBAAUO,MAAV,CAAiBC,UAD2B;EAEpDC,GAAG,EAAET,mBAAUU,MAFqC;EAGpDC,QAAQ,EAAEX,mBAAUU,MAHgC;EAIpDN,MAAM,EAAEJ,mBAAUY,SAAV,CAAoB,CAACZ,mBAAUU,MAAX,EAAmBV,mBAAUG,MAA7B,CAApB,CAJ4C;EAKpDD,KAAK,EAAEF,mBAAUY,SAAV,CAAoB,CAACZ,mBAAUU,MAAX,EAAmBV,mBAAUG,MAA7B,CAApB,CAL6C;EAMpDN,KAAK,EAAEG,mBAAUY,SAAV,CAAoB,CAACZ,mBAAUO,MAAX,EAAmBP,mBAAUa,KAA7B,CAApB,CAN6C;EAOpDC,eAAe,EAAEd,mBAAUe,IAAV,CAAeP,UAPoB;EAQpDQ,YAAY,EAAEhB,mBAAUG,MAR4B;EASpDc,8BAA8B,EAAEjB,mBAAUkB,IATU;EAUpDC,iBAAiB,EAAEpB,iBAViC;EAWpDH,OAAO,EAAEI,mBAAUe,IAXiC;EAYpDrB,MAAM,EAAEM,mBAAUU,MAZkC;EAapDU,SAAS,EAAEpB,mBAAUU,MAb+B;EAcpDW,uBAAuB,EAAEtB,iBAd2B;EAepDJ,cAAc,EAAEK,mBAAUO;AAf0B,CAAtD;AAkBA;AACA;AACA;;AACAzB,UAAU,CAACuB,SAAX,GAAuBA,SAAvB;AAEA;AACA;AACA;;AACAvB,UAAU,CAACwC,YAAX,GAA0B;EACxBL,8BAA8B,EAAE,KADR;EAExBH,eAAe,EAAElC,QAFO;EAGxB2C,uBAAuB,EAAEC,sCAHD;EAIxB3B,KAAK,EAAE;AAJiB,CAA1B;eAOef,U","names":["identity","arg","IMGElement","props","state","content","type","React","createElement","IMGElementContentSuccess","IMGElementContentLoading","IMGElementContentError","_react","_IMGElementContainer","testID","containerProps","onPress","style","containerStyle","imgDimensionsType","PropTypes","shape","width","number","height","propTypes","source","object","isRequired","alt","string","altColor","oneOfType","array","computeMaxWidth","func","contentWidth","enableExperimentalPercentWidth","bool","initialDimensions","objectFit","cachedNaturalDimensions","defaultProps","imagesInitialDimensions","defaultImageInitialDimensions"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/react-native-render-html/lib/commonjs/elements/IMGElement.tsx"],"sourcesContent":["import React, { ReactElement, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport useIMGElementState from './useIMGElementState';\nimport IMGElementContentSuccess from './IMGElementContentSuccess';\nimport IMGElementContainer from './IMGElementContainer';\nimport IMGElementContentLoading from './IMGElementContentLoading';\nimport IMGElementContentError from './IMGElementContentError';\nimport type { IMGElementProps } from './img-types';\nimport defaultImageInitialDimensions from './defaultInitialImageDimensions';\n\nexport type { IMGElementProps } from './img-types';\n\nfunction identity(arg: any) {\n  return arg;\n}\n\n/**\n * A component to render images based on an internal loading state.\n *\n * @remarks This component will attempt to draw a box of paint dimensions\n * before retrieving the physical dimensions of the image to avoid layout\n * shifts. See also {@link useIMGElementState}, {@link IMGElementContainer},\n * {@link IMGElementContentSuccess}, {@link IMGElementContentLoading}\n * and {@link IMGElementContentError} for customization.\n */\nfunction IMGElement(props: IMGElementProps): ReactElement {\n  const state = useIMGElementState(props);\n  let content: ReactNode;\n  if (state.type === 'success') {\n    content = React.createElement(IMGElementContentSuccess, state);\n  } else if (state.type === 'loading') {\n    content = React.createElement(IMGElementContentLoading, state);\n  } else {\n    content = React.createElement(IMGElementContentError, state);\n  }\n  return (\n    <IMGElementContainer\n      testID={props.testID}\n      {...props.containerProps}\n      onPress={props.onPress}\n      style={state.containerStyle}>\n      {content}\n    </IMGElementContainer>\n  );\n}\n\nconst imgDimensionsType = PropTypes.shape({\n  width: PropTypes.number,\n  height: PropTypes.number\n});\n\nconst propTypes: Record<keyof IMGElementProps, any> = {\n  source: PropTypes.object.isRequired,\n  alt: PropTypes.string,\n  altColor: PropTypes.string,\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  computeMaxWidth: PropTypes.func.isRequired,\n  contentWidth: PropTypes.number,\n  enableExperimentalPercentWidth: PropTypes.bool,\n  initialDimensions: imgDimensionsType,\n  onPress: PropTypes.func,\n  testID: PropTypes.string,\n  objectFit: PropTypes.string,\n  cachedNaturalDimensions: imgDimensionsType,\n  containerProps: PropTypes.object\n};\n\n/**\n * @ignore\n */\nIMGElement.propTypes = propTypes;\n\n/**\n * @ignore\n */\nIMGElement.defaultProps = {\n  enableExperimentalPercentWidth: false,\n  computeMaxWidth: identity,\n  imagesInitialDimensions: defaultImageInitialDimensions,\n  style: {}\n};\n\nexport default IMGElement;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}