{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ShortFlexCSSPropertyValidator = void 0;\nvar _ShortMergeRequest = require(\"../ShortMergeRequest\");\nvar _expandCSSToRN = _interopRequireDefault(require(\"./expandCSSToRN\"));\nvar _ShortCSSPropertyValidator = require(\"./ShortCSSPropertyValidator\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Flex shorthand property in CSS and React Native differ significantly. This\n * validator must therefore expand this shorthand in a way consistent with the\n * specs for both platforms (native and CSS).\n */\nclass ShortFlexCSSPropertyValidator extends _ShortCSSPropertyValidator.ShortCSSPropertyValidator {\n  constructor(params) {\n    super({\n      ...params,\n      propertyName: 'flex'\n    });\n  }\n  normalizeInlineCSSValue(value) {\n    return new _ShortMergeRequest.ShortMergeRequest((0, _expandCSSToRN.default)(this.propertyName, value));\n  }\n  /**\n   * In React Native, \"flex\" is not a shorthand property, although it looks\n   * like one. There is not always a tuple of (flexGrow, flexShrink,\n   * flexBasis) that maps exactly to one single \"flex\" value.\n   *\n   * For this very reason, it is ill-advised to use \"flex\" shorthand property.\n   * Use the longhand equivalent when that is possible.\n   *\n   * @param value\n   */\n\n  normalizeNativeValue(value) {\n    return value;\n  }\n}\nexports.ShortFlexCSSPropertyValidator = ShortFlexCSSPropertyValidator;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACO,MAAMA,6BAAN,SAA4CC,oDAA5C,CAGL;EACAC,WAAW,CAACC,MAAD,EAAuD;IAChE,MAAM;MAAE,GAAGA,MAAL;MAAaC,YAAY,EAAE;IAA3B,CAAN;EACD;EAEDC,uBAAuB,CAACC,KAAD,EAAgB;IACrC,OAAO,IAAIC,oCAAJ,CAAsB,4BAAc,KAAKH,YAAnB,EAAiCE,KAAjC,CAAtB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACEE,oBAAoB,CAACF,KAAD,EAAgB;IAClC,OAAOA,KAAP;EACD;AArBD","names":["ShortFlexCSSPropertyValidator","ShortCSSPropertyValidator","constructor","params","propertyName","normalizeInlineCSSValue","value","ShortMergeRequest","normalizeNativeValue"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/@native-html/css-processor/lib/commonjs/validators/ShortFlexCSSPropertyValidator.ts"],"sourcesContent":["import { ShortMergeRequest } from '../ShortMergeRequest';\nimport expandCSSToRN from './expandCSSToRN';\nimport { ShortCSSPropertyValidator } from './ShortCSSPropertyValidator';\nimport { CSSPropertyValidatorParams, CSSPropertyModel } from './types';\n\n/**\n * Flex shorthand property in CSS and React Native differ significantly. This\n * validator must therefore expand this shorthand in a way consistent with the\n * specs for both platforms (native and CSS).\n */\nexport class ShortFlexCSSPropertyValidator extends ShortCSSPropertyValidator<\n  CSSPropertyModel,\n  number\n> {\n  constructor(params: CSSPropertyValidatorParams<CSSPropertyModel>) {\n    super({ ...params, propertyName: 'flex' });\n  }\n\n  normalizeInlineCSSValue(value: string) {\n    return new ShortMergeRequest(expandCSSToRN(this.propertyName, value));\n  }\n\n  /**\n   * In React Native, \"flex\" is not a shorthand property, although it looks\n   * like one. There is not always a tuple of (flexGrow, flexShrink,\n   * flexBasis) that maps exactly to one single \"flex\" value.\n   *\n   * For this very reason, it is ill-advised to use \"flex\" shorthand property.\n   * Use the longhand equivalent when that is possible.\n   *\n   * @param value\n   */\n  normalizeNativeValue(value: number) {\n    return value;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}