{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TTextCtor = exports.default = void 0;\nvar _HTMLContentModel = _interopRequireDefault(require(\"../model/HTMLContentModel\"));\nvar _compose = _interopRequireDefault(require(\"ramda/src/compose\"));\nvar _textTransforms = require(\"../flow/text-transforms\");\nvar _TNodeCtor = _interopRequireDefault(require(\"./TNodeCtor\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst collapseWhiteSpaces = (0, _compose.default)(_textTransforms.normalizeWhitespaces, _textTransforms.replaceSegmentBreaks, _textTransforms.normalizeZeroWidthWhitespaces, _textTransforms.removeConsecutiveSegmentBreaks, _textTransforms.removeCollapsibleAroundSegmentBreak);\nconst collapseWhiteSpacesWithEastAsianCharset = (0, _compose.default)(_textTransforms.normalizeWhitespaces, _textTransforms.replaceSegmentBreaks, _textTransforms.removeLineBreaksAroundEastAsianDiscardSet, _textTransforms.normalizeZeroWidthWhitespaces, _textTransforms.removeConsecutiveSegmentBreaks, _textTransforms.removeCollapsibleAroundSegmentBreak);\nconst TTextCtor = function TText(init) {\n  this.initialize(init);\n  this.isVoid = this.elementModel ? this.elementModel.isVoid : false;\n}; //@ts-ignore\n\nexports.TTextCtor = TTextCtor;\nTTextCtor.prototype = new _TNodeCtor.default('text', 'TText', {\n  data: {\n    get() {\n      return this.init.textNode.data;\n    },\n    set(data) {\n      this.init.textNode.data = data;\n    }\n  }\n});\nTTextCtor.prototype.matchContentModel = function matchContentModel(contentModel) {\n  return contentModel === _HTMLContentModel.default.textual || contentModel === _HTMLContentModel.default.mixed;\n};\nTTextCtor.prototype.isCollapsibleLeft = function isCollapsibleLeft() {\n  return this.hasWhiteSpaceCollapsingEnabled && !this.isEmpty() && this.data[0] === ' ';\n};\nTTextCtor.prototype.isCollapsibleRight = function isCollapsibleRight() {\n  return this.hasWhiteSpaceCollapsingEnabled && !this.isEmpty() && (this.isVoid || this.data[this.data.length - 1] === ' ');\n};\nTTextCtor.prototype.isEmpty = function isEmpty() {\n  // Only anonymous text nodes can be considered \"empty\"\n  return this.tagName === null && !this.data.length;\n};\nTTextCtor.prototype.trimLeft = function trimLeft() {\n  if (this.isCollapsibleLeft()) {\n    this.data = this.data.slice(1);\n  }\n};\nTTextCtor.prototype.trimRight = function trimRight() {\n  if (this.isCollapsibleRight()) {\n    this.data = this.data.substr(0, this.data.length - 1);\n  }\n};\nTTextCtor.prototype.collapseChildren = function collapseChildren() {\n  if (this.hasWhiteSpaceCollapsingEnabled) {\n    if (this.init.context.removeLineBreaksAroundEastAsianDiscardSet) {\n      this.data = collapseWhiteSpacesWithEastAsianCharset(this.data);\n    } else {\n      this.data = collapseWhiteSpaces(this.data);\n    }\n  }\n  return null;\n};\nvar _default = TTextCtor;\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["collapseWhiteSpaces","normalizeWhitespaces","replaceSegmentBreaks","normalizeZeroWidthWhitespaces","removeConsecutiveSegmentBreaks","removeCollapsibleAroundSegmentBreak","collapseWhiteSpacesWithEastAsianCharset","removeLineBreaksAroundEastAsianDiscardSet","TTextCtor","TText","init","initialize","isVoid","elementModel","prototype","TNodeCtor","data","get","textNode","set","matchContentModel","contentModel","HTMLContentModel","textual","mixed","isCollapsibleLeft","hasWhiteSpaceCollapsingEnabled","isEmpty","isCollapsibleRight","length","tagName","trimLeft","slice","trimRight","substr","collapseChildren","context"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/@native-html/transient-render-engine/lib/commonjs/tree/TTextCtor.ts"],"sourcesContent":["import { Text } from '../dom/dom-utils';\nimport HTMLContentModel from '../model/HTMLContentModel';\n\nimport compose from 'ramda/src/compose';\nimport { TNodeInit, TNodeImpl } from './tree-types';\nimport {\n  normalizeWhitespaces,\n  normalizeZeroWidthWhitespaces,\n  removeCollapsibleAroundSegmentBreak,\n  removeConsecutiveSegmentBreaks,\n  removeLineBreaksAroundEastAsianDiscardSet,\n  replaceSegmentBreaks\n} from '../flow/text-transforms';\nimport TNodeCtor, { GenericTNodeCtor, Mutable } from './TNodeCtor';\n\nexport interface TTextInit extends TNodeInit {\n  readonly textNode: Text;\n}\n\nexport interface TTextImpl extends TNodeImpl<TTextInit> {\n  readonly data: string;\n  /**\n   * True when tagName is defined and should be substituted with text when\n   * rendering. E.g. <br> tags.\n   */\n  readonly isVoid: boolean;\n}\n\nconst collapseWhiteSpaces = compose(\n  normalizeWhitespaces,\n  replaceSegmentBreaks,\n  normalizeZeroWidthWhitespaces,\n  removeConsecutiveSegmentBreaks,\n  removeCollapsibleAroundSegmentBreak\n);\n\nconst collapseWhiteSpacesWithEastAsianCharset = compose(\n  normalizeWhitespaces,\n  replaceSegmentBreaks,\n  removeLineBreaksAroundEastAsianDiscardSet,\n  normalizeZeroWidthWhitespaces,\n  removeConsecutiveSegmentBreaks,\n  removeCollapsibleAroundSegmentBreak\n);\n\nconst TTextCtor = function TText(this: Mutable<TTextImpl>, init: TTextInit) {\n  this.initialize(init);\n  this.isVoid = this.elementModel ? this.elementModel.isVoid : false;\n} as Function as GenericTNodeCtor<TTextInit, TTextImpl>;\n\n//@ts-ignore\nTTextCtor.prototype = new TNodeCtor('text', 'TText', {\n  data: {\n    get(this: TTextImpl) {\n      return this.init.textNode.data;\n    },\n    set(this: TTextImpl, data: string) {\n      this.init.textNode.data = data;\n    }\n  }\n});\n\nTTextCtor.prototype.matchContentModel = function matchContentModel(\n  contentModel: HTMLContentModel\n) {\n  return (\n    contentModel === HTMLContentModel.textual ||\n    contentModel === HTMLContentModel.mixed\n  );\n};\n\nTTextCtor.prototype.isCollapsibleLeft = function isCollapsibleLeft(\n  this: TTextImpl\n) {\n  return (\n    this.hasWhiteSpaceCollapsingEnabled &&\n    !this.isEmpty() &&\n    this.data[0] === ' '\n  );\n};\n\nTTextCtor.prototype.isCollapsibleRight = function isCollapsibleRight(\n  this: TTextImpl\n) {\n  return (\n    this.hasWhiteSpaceCollapsingEnabled &&\n    !this.isEmpty() &&\n    (this.isVoid || this.data[this.data.length - 1] === ' ')\n  );\n};\n\nTTextCtor.prototype.isEmpty = function isEmpty(this: TTextImpl) {\n  // Only anonymous text nodes can be considered \"empty\"\n  return this.tagName === null && !this.data.length;\n};\n\nTTextCtor.prototype.trimLeft = function trimLeft(this: Mutable<TTextImpl>) {\n  if (this.isCollapsibleLeft()) {\n    this.data = this.data.slice(1);\n  }\n};\n\nTTextCtor.prototype.trimRight = function trimRight(this: Mutable<TTextImpl>) {\n  if (this.isCollapsibleRight()) {\n    this.data = this.data.substr(0, this.data.length - 1);\n  }\n};\n\nTTextCtor.prototype.collapseChildren = function collapseChildren(\n  this: Mutable<TTextImpl>\n) {\n  if (this.hasWhiteSpaceCollapsingEnabled) {\n    if (this.init.context.removeLineBreaksAroundEastAsianDiscardSet) {\n      this.data = collapseWhiteSpacesWithEastAsianCharset(this.data);\n    } else {\n      this.data = collapseWhiteSpaces(this.data);\n    }\n  }\n  return null;\n};\n\nexport default TTextCtor;\n\nexport { TTextCtor };\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}