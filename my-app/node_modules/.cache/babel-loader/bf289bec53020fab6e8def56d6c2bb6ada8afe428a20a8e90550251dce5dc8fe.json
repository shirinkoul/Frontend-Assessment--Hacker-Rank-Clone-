{"ast":null,"code":"/**\n * Create an alphabetic initial counter representation from an UTF-16 unicode\n * and a range.\n *\n * @param index - The index to render.\n * @param baseCharcode - The original UTF-16 unicode.\n * @param modulo - The number of symbols in the set.\n * @param alpha - In alpha mode, index starts at 1 instead of 0.\n * @returns\n */\nfunction getAlphanumFromUnicodeRange(index, baseCharcode, modulo, alpha) {\n  const reindex = index - Number(alpha);\n  if (reindex < 0) {\n    return undefined;\n  }\n  if (reindex < modulo) {\n    return String.fromCharCode(baseCharcode + reindex);\n  }\n  const rest = reindex % modulo;\n  const next = (reindex - rest - modulo) / modulo + 1;\n  return getAlphanumFromUnicodeRange(next, baseCharcode, modulo, alpha) + String.fromCharCode(baseCharcode + rest);\n}\nexport default getAlphanumFromUnicodeRange;","map":{"version":3,"mappings":"AAYA;;;;;;;;;;AAUA,SAASA,2BAA2B,CAClCC,KAAa,EACbC,YAAoB,EACpBC,MAAc,EACdC,KAAc;EAEd,MAAMC,OAAO,GAAGJ,KAAK,GAAGK,MAAM,CAACF,KAAK,CAAC;EACrC,IAAIC,OAAO,GAAG,CAAC,EAAE;IACf,OAAOE,SAAS;;EAElB,IAAIF,OAAO,GAAGF,MAAM,EAAE;IACpB,OAAOK,MAAM,CAACC,YAAY,CAACP,YAAY,GAAGG,OAAO,CAAC;;EAEpD,MAAMK,IAAI,GAAGL,OAAO,GAAGF,MAAM;EAC7B,MAAMQ,IAAI,GAAG,CAACN,OAAO,GAAGK,IAAI,GAAGP,MAAM,IAAIA,MAAM,GAAG,CAAC;EACnD,OACEH,2BAA2B,CAACW,IAAI,EAAET,YAAY,EAAEC,MAAM,EAAEC,KAAa,CAAC,GACtEI,MAAM,CAACC,YAAY,CAACP,YAAY,GAAGQ,IAAI,CAAC;AAE5C;AAEA,eAAeV,2BAA2B","names":["getAlphanumFromUnicodeRange","index","baseCharcode","modulo","alpha","reindex","Number","undefined","String","fromCharCode","rest","next"],"sources":["/home/shirin/Desktop/Frontend Assessment- Hacker Rank Clone /node_modules/@jsamr/counter-style/src/getAlphanumFromUnicodeRange.ts"],"sourcesContent":["function getAlphanumFromUnicodeRange(\n  index: number,\n  baseCharcode: number,\n  modulo: number,\n  alpha: true\n): string | undefined;\nfunction getAlphanumFromUnicodeRange(\n  index: number,\n  baseCharcode: number,\n  modulo: number,\n  alpha: false\n): string;\n/**\n * Create an alphabetic initial counter representation from an UTF-16 unicode\n * and a range.\n *\n * @param index - The index to render.\n * @param baseCharcode - The original UTF-16 unicode.\n * @param modulo - The number of symbols in the set.\n * @param alpha - In alpha mode, index starts at 1 instead of 0.\n * @returns\n */\nfunction getAlphanumFromUnicodeRange(\n  index: number,\n  baseCharcode: number,\n  modulo: number,\n  alpha: boolean\n): string | undefined {\n  const reindex = index - Number(alpha);\n  if (reindex < 0) {\n    return undefined;\n  }\n  if (reindex < modulo) {\n    return String.fromCharCode(baseCharcode + reindex);\n  }\n  const rest = reindex % modulo;\n  const next = (reindex - rest - modulo) / modulo + 1;\n  return (\n    getAlphanumFromUnicodeRange(next, baseCharcode, modulo, alpha as true) +\n    String.fromCharCode(baseCharcode + rest)\n  );\n}\n\nexport default getAlphanumFromUnicodeRange;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}